name: "Build Image from a Branch"
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      branch:
        type: string
        required: true
        description: "Input a branch name"

env:
  REGISTRY: "ghcr.io"
  IMAGE_NAME: "futureversecom/seed"

jobs:
  build-image-by-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check if branch input is empty
        id: branch-check
        shell: bash
        run: |
          # remove any whitespaces to the input branch
          BRANCH="$(echo -e "${{ github.event.inputs.branch }}" | xargs)"
          if [ "$BRANCH" != '' ]; then
            echo "isEmpty=false" >> $GITHUB_OUTPUT;
          else
            echo "isEmpty=true" >> $GITHUB_OUTPUT;
          fi    

      - name: Checkout branch
        if: steps.branch-check.outputs.isEmpty == 'false'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: ghcr.io login
        if: steps.branch-check.outputs.isEmpty == 'false'
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # build and tag an image with branch name
      - name: Build üõ† & Publish üê≥
        if: steps.branch-check.outputs.isEmpty == 'false'
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "commit hash: $COMMIT_HASH"

          # manually get the branch name since github.ref_name can get the tag instead
          # and replace invalid chars with dash char
          GIT_REF=$(git rev-parse --abbrev-ref HEAD | sed 's/[^a-zA-Z0-9]/-/g')
          echo "branch name: $GIT_REF"

          docker build -t "$REGISTRY/$IMAGE_NAME:$COMMIT_HASH" -f ./Dockerfile .
          docker push "$REGISTRY/$IMAGE_NAME:$COMMIT_HASH"

          # tag the image with the branch name
          docker tag "$REGISTRY/$IMAGE_NAME:$COMMIT_HASH" "$REGISTRY/$IMAGE_NAME:$GIT_REF"
          docker push "$REGISTRY/$IMAGE_NAME:$GIT_REF"

          # clean up images
          docker image prune --filter label=stage=build -f
