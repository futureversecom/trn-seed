name: "Image Builder"
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_run:
    workflows:
      - Release
    types:
      - completed
    branches:
      - "release/*"
  push:
    branches:
      - "main"
      - "release/*"
    paths:
      - "**.rs"
      - "**.toml"
      - "**.yml"
      - "**.lock"
      - "genesis/**"
      - "Dockerfile"

env:
  REGISTRY: "ghcr.io"
  IMAGE_NAME: "futureversecom/root-network"

jobs:
  build-image:
    if: github.event.workflow_run.conclusion == 'success' || contains(github.ref_name, 'main') || contains(github.ref_name, 'release')
    # only run if release branch CI build passes or its a push to main
    runs-on: [self-hosted]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: ghcr.io login
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build üõ† & Publish üê≥
        # build and tag an image with commit hash and 'latest', additionally:
        # if the commit is tagged, tag the image also e.g. 1.0.0
        # if the branch name is release/x.x.x tag the image
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "commit hash: $COMMIT_HASH"
          COMMIT_TAG=$((git describe --exact-match --tags HEAD) || true)
          echo "commit tag(?): $COMMIT_TAG"
          RELEASE_TAG=$(echo -n $GITHUB_REF | grep -oP '(?<=release/).*' || true)

          echo "github ref: $GITHUB_REF"
          echo "release tag(?): $RELEASE_TAG"

          docker build -t ghcr.io/"$IMAGE_NAME":"$COMMIT_HASH" -t ghcr.io/"$IMAGE_NAME":latest -f ./Dockerfile .

          docker push ghcr.io/"$IMAGE_NAME":"$COMMIT_HASH"
          docker push ghcr.io/"$IMAGE_NAME":latest

          # commit was tagged
          if [ -n "$COMMIT_TAG" ]; then
            docker tag $IMAGE_NAME:$COMMIT_HASH $IMAGE_NAME:$COMMIT_TAG
            docker push $IMAGE_NAME:$COMMIT_TAG
          fi
          # branch is a release branch
          if [ -n "$RELEASE_TAG" ]; then
            docker tag $IMAGE_NAME:$COMMIT_HASH $IMAGE_NAME:$RELEASE_TAG
            docker push $IMAGE_NAME:$RELEASE_TAG
          fi
          # clean up images
          docker image prune --filter label=stage=build
