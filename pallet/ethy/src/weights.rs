// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_ethy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-05-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-102-147`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-ethy
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./pallet/ethy/src/weights.rs
// --template
// ./scripts/pallet_template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ethy.
pub trait WeightInfo {
	fn set_xrpl_door_signers(p: u32, ) -> Weight;
	fn set_relayer() -> Weight;
	fn deposit_relayer_bond() -> Weight;
	fn withdraw_relayer_bond() -> Weight;
	fn set_event_block_confirmations() -> Weight;
	fn set_delayed_event_proofs_per_block() -> Weight;
	fn set_challenge_period() -> Weight;
	fn set_contract_address() -> Weight;
	fn set_bridge_paused() -> Weight;
	fn finalise_authorities_change() -> Weight;
	fn remove_missing_event_id() -> Weight;
	fn submit_missing_event() -> Weight;
	fn submit_event() -> Weight;
	fn submit_challenge() -> Weight;
	fn submit_notarization() -> Weight;
	fn handle_authorities_change() -> Weight;
}

/// Weights for pallet_ethy using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: `EthBridge::NotaryKeys` (r:1 w:0)
	// Proof: `EthBridge::NotaryKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::XrplDoorSigners` (r:1 w:19)
	// Proof: `EthBridge::XrplDoorSigners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotaryXrplKeys` (r:0 w:1)
	// Proof: `EthBridge::NotaryXrplKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 19]`.
	fn set_xrpl_door_signers(p: u32, ) -> Weight {
		Weight::from_all(51_256_671 as u64)
			// Standard Error: 7_900
			.saturating_add(Weight::from_all(3_225_611 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: `EthBridge::RelayerPaidBond` (r:1 w:0)
	// Proof: `EthBridge::RelayerPaidBond` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::Relayer` (r:0 w:1)
	// Proof: `EthBridge::Relayer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_relayer() -> Weight {
		Weight::from_all(42_939_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `EthBridge::RelayerPaidBond` (r:1 w:1)
	// Proof: `EthBridge::RelayerPaidBond` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AssetsExt::Holds` (r:1 w:1)
	// Proof: `AssetsExt::Holds` (`max_values`: None, `max_size`: Some(433), added: 2908, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:2 w:2)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn deposit_relayer_bond() -> Weight {
		Weight::from_all(200_169_000 as u64)
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: `EthBridge::Relayer` (r:1 w:0)
	// Proof: `EthBridge::Relayer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::RelayerPaidBond` (r:1 w:1)
	// Proof: `EthBridge::RelayerPaidBond` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AssetsExt::Holds` (r:1 w:1)
	// Proof: `AssetsExt::Holds` (`max_values`: None, `max_size`: Some(433), added: 2908, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:2 w:2)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn withdraw_relayer_bond() -> Weight {
		Weight::from_all(207_719_000 as u64)
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: `EthBridge::EventBlockConfirmations` (r:0 w:1)
	// Proof: `EthBridge::EventBlockConfirmations` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_event_block_confirmations() -> Weight {
		Weight::from_all(24_183_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `EthBridge::DelayedEventProofsPerBlock` (r:0 w:1)
	// Proof: `EthBridge::DelayedEventProofsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_delayed_event_proofs_per_block() -> Weight {
		Weight::from_all(24_872_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `EthBridge::ChallengePeriod` (r:0 w:1)
	// Proof: `EthBridge::ChallengePeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_challenge_period() -> Weight {
		Weight::from_all(24_016_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `EthBridge::ContractAddress` (r:0 w:1)
	// Proof: `EthBridge::ContractAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_contract_address() -> Weight {
		Weight::from_all(26_770_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `EthBridge::BridgePaused` (r:1 w:1)
	// Proof: `EthBridge::BridgePaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_bridge_paused() -> Weight {
		Weight::from_all(31_760_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `EthBridge::NotarySetId` (r:1 w:1)
	// Proof: `EthBridge::NotarySetId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `System::Digest` (r:1 w:1)
	// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::BridgePaused` (r:1 w:1)
	// Proof: `EthBridge::BridgePaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::XrplDoorSigners` (r:1 w:0)
	// Proof: `EthBridge::XrplDoorSigners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::AuthoritiesChangedThisEra` (r:0 w:1)
	// Proof: `EthBridge::AuthoritiesChangedThisEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotaryXrplKeys` (r:0 w:1)
	// Proof: `EthBridge::NotaryXrplKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotaryKeys` (r:0 w:1)
	// Proof: `EthBridge::NotaryKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn finalise_authorities_change() -> Weight {
		Weight::from_all(50_901_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: `EthBridge::MissedMessageIds` (r:1 w:1)
	// Proof: `EthBridge::MissedMessageIds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_missing_event_id() -> Weight {
		Weight::from_all(39_981_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `EthBridge::Relayer` (r:1 w:0)
	// Proof: `EthBridge::Relayer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::MissedMessageIds` (r:1 w:0)
	// Proof: `EthBridge::MissedMessageIds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingEventClaims` (r:1 w:1)
	// Proof: `EthBridge::PendingEventClaims` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::ChallengePeriod` (r:1 w:0)
	// Proof: `EthBridge::ChallengePeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::MessagesValidAt` (r:1 w:1)
	// Proof: `EthBridge::MessagesValidAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingClaimStatus` (r:0 w:1)
	// Proof: `EthBridge::PendingClaimStatus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_missing_event() -> Weight {
		Weight::from_all(79_768_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: `EthBridge::Relayer` (r:1 w:0)
	// Proof: `EthBridge::Relayer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::ProcessedMessageIds` (r:1 w:0)
	// Proof: `EthBridge::ProcessedMessageIds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingEventClaims` (r:1 w:1)
	// Proof: `EthBridge::PendingEventClaims` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::ChallengePeriod` (r:1 w:0)
	// Proof: `EthBridge::ChallengePeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::MessagesValidAt` (r:1 w:1)
	// Proof: `EthBridge::MessagesValidAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingClaimStatus` (r:0 w:1)
	// Proof: `EthBridge::PendingClaimStatus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_event() -> Weight {
		Weight::from_all(67_866_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: `EthBridge::PendingEventClaims` (r:1 w:0)
	// Proof: `EthBridge::PendingEventClaims` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingClaimStatus` (r:1 w:1)
	// Proof: `EthBridge::PendingClaimStatus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AssetsExt::Holds` (r:1 w:1)
	// Proof: `AssetsExt::Holds` (`max_values`: None, `max_size`: Some(433), added: 2908, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:2 w:2)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `EthBridge::PendingClaimChallenges` (r:1 w:1)
	// Proof: `EthBridge::PendingClaimChallenges` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::ChallengerAccount` (r:0 w:1)
	// Proof: `EthBridge::ChallengerAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_challenge() -> Weight {
		Weight::from_all(224_778_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: `EthBridge::NotaryKeys` (r:1 w:0)
	// Proof: `EthBridge::NotaryKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingClaimStatus` (r:1 w:1)
	// Proof: `EthBridge::PendingClaimStatus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Session::Validators` (r:1 w:0)
	// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::EventNotarizations` (r:2 w:1)
	// Proof: `EthBridge::EventNotarizations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingClaimChallenges` (r:1 w:1)
	// Proof: `EthBridge::PendingClaimChallenges` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingEventClaims` (r:1 w:0)
	// Proof: `EthBridge::PendingEventClaims` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::Relayer` (r:1 w:0)
	// Proof: `EthBridge::Relayer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::ChallengerAccount` (r:1 w:1)
	// Proof: `EthBridge::ChallengerAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AssetsExt::Holds` (r:1 w:1)
	// Proof: `AssetsExt::Holds` (`max_values`: None, `max_size`: Some(433), added: 2908, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:2 w:2)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn submit_notarization() -> Weight {
		Weight::from_all(302_708_000 as u64)
			.saturating_add(T::DbWeight::get().reads(14 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: `EthBridge::NextNotaryKeys` (r:1 w:0)
	// Proof: `EthBridge::NextNotaryKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotarySetId` (r:1 w:0)
	// Proof: `EthBridge::NotarySetId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::ContractAddress` (r:1 w:0)
	// Proof: `EthBridge::ContractAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NextEventProofId` (r:1 w:1)
	// Proof: `EthBridge::NextEventProofId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotaryKeys` (r:1 w:0)
	// Proof: `EthBridge::NotaryKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::BridgePaused` (r:1 w:1)
	// Proof: `EthBridge::BridgePaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `System::Digest` (r:1 w:1)
	// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::XrplDoorSigners` (r:1 w:0)
	// Proof: `EthBridge::XrplDoorSigners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotaryXrplKeys` (r:1 w:0)
	// Proof: `EthBridge::NotaryXrplKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `XRPLBridge::DoorAddress` (r:1 w:0)
	// Proof: `XRPLBridge::DoorAddress` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	// Storage: `EthBridge::NextAuthorityChange` (r:0 w:1)
	// Proof: `EthBridge::NextAuthorityChange` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::AuthoritiesChangedThisEra` (r:0 w:1)
	// Proof: `EthBridge::AuthoritiesChangedThisEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotarySetProofId` (r:0 w:1)
	// Proof: `EthBridge::NotarySetProofId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn handle_authorities_change() -> Weight {
		Weight::from_all(177_258_000 as u64)
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `EthBridge::NotaryKeys` (r:1 w:0)
	// Proof: `EthBridge::NotaryKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::XrplDoorSigners` (r:1 w:19)
	// Proof: `EthBridge::XrplDoorSigners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotaryXrplKeys` (r:0 w:1)
	// Proof: `EthBridge::NotaryXrplKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 19]`.
	fn set_xrpl_door_signers(p: u32, ) -> Weight {
		Weight::from_all(51_256_671 as u64)
			// Standard Error: 7_900
			.saturating_add(Weight::from_all(3_225_611 as u64).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: `EthBridge::RelayerPaidBond` (r:1 w:0)
	// Proof: `EthBridge::RelayerPaidBond` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::Relayer` (r:0 w:1)
	// Proof: `EthBridge::Relayer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_relayer() -> Weight {
		Weight::from_all(42_939_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `EthBridge::RelayerPaidBond` (r:1 w:1)
	// Proof: `EthBridge::RelayerPaidBond` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AssetsExt::Holds` (r:1 w:1)
	// Proof: `AssetsExt::Holds` (`max_values`: None, `max_size`: Some(433), added: 2908, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:2 w:2)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn deposit_relayer_bond() -> Weight {
		Weight::from_all(200_169_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: `EthBridge::Relayer` (r:1 w:0)
	// Proof: `EthBridge::Relayer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::RelayerPaidBond` (r:1 w:1)
	// Proof: `EthBridge::RelayerPaidBond` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AssetsExt::Holds` (r:1 w:1)
	// Proof: `AssetsExt::Holds` (`max_values`: None, `max_size`: Some(433), added: 2908, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:2 w:2)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn withdraw_relayer_bond() -> Weight {
		Weight::from_all(207_719_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: `EthBridge::EventBlockConfirmations` (r:0 w:1)
	// Proof: `EthBridge::EventBlockConfirmations` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_event_block_confirmations() -> Weight {
		Weight::from_all(24_183_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `EthBridge::DelayedEventProofsPerBlock` (r:0 w:1)
	// Proof: `EthBridge::DelayedEventProofsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_delayed_event_proofs_per_block() -> Weight {
		Weight::from_all(24_872_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `EthBridge::ChallengePeriod` (r:0 w:1)
	// Proof: `EthBridge::ChallengePeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_challenge_period() -> Weight {
		Weight::from_all(24_016_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `EthBridge::ContractAddress` (r:0 w:1)
	// Proof: `EthBridge::ContractAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_contract_address() -> Weight {
		Weight::from_all(26_770_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `EthBridge::BridgePaused` (r:1 w:1)
	// Proof: `EthBridge::BridgePaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_bridge_paused() -> Weight {
		Weight::from_all(31_760_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `EthBridge::NotarySetId` (r:1 w:1)
	// Proof: `EthBridge::NotarySetId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `System::Digest` (r:1 w:1)
	// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::BridgePaused` (r:1 w:1)
	// Proof: `EthBridge::BridgePaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::XrplDoorSigners` (r:1 w:0)
	// Proof: `EthBridge::XrplDoorSigners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::AuthoritiesChangedThisEra` (r:0 w:1)
	// Proof: `EthBridge::AuthoritiesChangedThisEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotaryXrplKeys` (r:0 w:1)
	// Proof: `EthBridge::NotaryXrplKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotaryKeys` (r:0 w:1)
	// Proof: `EthBridge::NotaryKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn finalise_authorities_change() -> Weight {
		Weight::from_all(50_901_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: `EthBridge::MissedMessageIds` (r:1 w:1)
	// Proof: `EthBridge::MissedMessageIds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_missing_event_id() -> Weight {
		Weight::from_all(39_981_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `EthBridge::Relayer` (r:1 w:0)
	// Proof: `EthBridge::Relayer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::MissedMessageIds` (r:1 w:0)
	// Proof: `EthBridge::MissedMessageIds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingEventClaims` (r:1 w:1)
	// Proof: `EthBridge::PendingEventClaims` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::ChallengePeriod` (r:1 w:0)
	// Proof: `EthBridge::ChallengePeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::MessagesValidAt` (r:1 w:1)
	// Proof: `EthBridge::MessagesValidAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingClaimStatus` (r:0 w:1)
	// Proof: `EthBridge::PendingClaimStatus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_missing_event() -> Weight {
		Weight::from_all(79_768_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: `EthBridge::Relayer` (r:1 w:0)
	// Proof: `EthBridge::Relayer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::ProcessedMessageIds` (r:1 w:0)
	// Proof: `EthBridge::ProcessedMessageIds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingEventClaims` (r:1 w:1)
	// Proof: `EthBridge::PendingEventClaims` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::ChallengePeriod` (r:1 w:0)
	// Proof: `EthBridge::ChallengePeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::MessagesValidAt` (r:1 w:1)
	// Proof: `EthBridge::MessagesValidAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingClaimStatus` (r:0 w:1)
	// Proof: `EthBridge::PendingClaimStatus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_event() -> Weight {
		Weight::from_all(67_866_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: `EthBridge::PendingEventClaims` (r:1 w:0)
	// Proof: `EthBridge::PendingEventClaims` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingClaimStatus` (r:1 w:1)
	// Proof: `EthBridge::PendingClaimStatus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AssetsExt::Holds` (r:1 w:1)
	// Proof: `AssetsExt::Holds` (`max_values`: None, `max_size`: Some(433), added: 2908, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:2 w:2)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `EthBridge::PendingClaimChallenges` (r:1 w:1)
	// Proof: `EthBridge::PendingClaimChallenges` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::ChallengerAccount` (r:0 w:1)
	// Proof: `EthBridge::ChallengerAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_challenge() -> Weight {
		Weight::from_all(224_778_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: `EthBridge::NotaryKeys` (r:1 w:0)
	// Proof: `EthBridge::NotaryKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingClaimStatus` (r:1 w:1)
	// Proof: `EthBridge::PendingClaimStatus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Session::Validators` (r:1 w:0)
	// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::EventNotarizations` (r:2 w:1)
	// Proof: `EthBridge::EventNotarizations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingClaimChallenges` (r:1 w:1)
	// Proof: `EthBridge::PendingClaimChallenges` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::PendingEventClaims` (r:1 w:0)
	// Proof: `EthBridge::PendingEventClaims` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::Relayer` (r:1 w:0)
	// Proof: `EthBridge::Relayer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::ChallengerAccount` (r:1 w:1)
	// Proof: `EthBridge::ChallengerAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `AssetsExt::Holds` (r:1 w:1)
	// Proof: `AssetsExt::Holds` (`max_values`: None, `max_size`: Some(433), added: 2908, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:2 w:2)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn submit_notarization() -> Weight {
		Weight::from_all(302_708_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(14 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: `EthBridge::NextNotaryKeys` (r:1 w:0)
	// Proof: `EthBridge::NextNotaryKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotarySetId` (r:1 w:0)
	// Proof: `EthBridge::NotarySetId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::ContractAddress` (r:1 w:0)
	// Proof: `EthBridge::ContractAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NextEventProofId` (r:1 w:1)
	// Proof: `EthBridge::NextEventProofId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotaryKeys` (r:1 w:0)
	// Proof: `EthBridge::NotaryKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::BridgePaused` (r:1 w:1)
	// Proof: `EthBridge::BridgePaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `System::Digest` (r:1 w:1)
	// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::XrplDoorSigners` (r:1 w:0)
	// Proof: `EthBridge::XrplDoorSigners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotaryXrplKeys` (r:1 w:0)
	// Proof: `EthBridge::NotaryXrplKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `XRPLBridge::DoorAddress` (r:1 w:0)
	// Proof: `XRPLBridge::DoorAddress` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	// Storage: `EthBridge::NextAuthorityChange` (r:0 w:1)
	// Proof: `EthBridge::NextAuthorityChange` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::AuthoritiesChangedThisEra` (r:0 w:1)
	// Proof: `EthBridge::AuthoritiesChangedThisEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotarySetProofId` (r:0 w:1)
	// Proof: `EthBridge::NotarySetProofId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn handle_authorities_change() -> Weight {
		Weight::from_all(177_258_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
}

