// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_ethy`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-05-01, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Jasons-Ubuntu`, CPU: `AMD Ryzen 9 7950X 16-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain
// dev
// --steps=50
// --repeat=20
// --pallet=pallet-ethy
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ethy.
pub trait WeightInfo {
    fn set_xrpl_door_signers(p: u32, ) -> Weight;
    fn set_relayer() -> Weight;
    fn deposit_relayer_bond() -> Weight;
    fn withdraw_relayer_bond() -> Weight;
    fn set_event_block_confirmations() -> Weight;
    fn set_delayed_event_proofs_per_block() -> Weight;
    fn set_challenge_period() -> Weight;
    fn set_contract_address() -> Weight;
    fn set_bridge_paused() -> Weight;
    fn finalise_authorities_change() -> Weight;
    fn remove_missing_event_id() -> Weight;
    fn submit_missing_event() -> Weight;
    fn submit_event() -> Weight;
    fn submit_challenge() -> Weight;
    fn submit_notarization() -> Weight;
}

/// Weights for pallet_ethy using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    // Storage: EthBridge NotaryKeys (r:1 w:0)
    // Storage: EthBridge XrplDoorSigners (r:1 w:1)
    // Storage: EthBridge NotaryXrplKeys (r:0 w:1)
    /// The range of component `p` is `[1, 19]`.
    fn set_xrpl_door_signers(p: u32, ) -> Weight {
        Weight::from_ref_time(17_804_000 as u64)
            // Standard Error: 1_893
            .saturating_add(Weight::from_ref_time(866_563 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
    // Storage: EthBridge RelayerPaidBond (r:1 w:0)
    // Storage: EthBridge Relayer (r:0 w:1)
    fn set_relayer() -> Weight {
        Weight::from_ref_time(16_110_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: EthBridge RelayerPaidBond (r:1 w:1)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:2 w:2)
    fn deposit_relayer_bond() -> Weight {
        Weight::from_ref_time(58_120_000 as u64)
            .saturating_add(T::DbWeight::get().reads(7 as u64))
            .saturating_add(T::DbWeight::get().writes(7 as u64))
    }
    // Storage: EthBridge Relayer (r:1 w:0)
    // Storage: EthBridge RelayerPaidBond (r:1 w:1)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:2 w:2)
    fn withdraw_relayer_bond() -> Weight {
        Weight::from_ref_time(60_995_000 as u64)
            .saturating_add(T::DbWeight::get().reads(8 as u64))
            .saturating_add(T::DbWeight::get().writes(7 as u64))
    }
    // Storage: EthBridge EventBlockConfirmations (r:0 w:1)
    fn set_event_block_confirmations() -> Weight {
        Weight::from_ref_time(3_727_000 as u64)
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: EthBridge DelayedEventProofsPerBlock (r:0 w:1)
    fn set_delayed_event_proofs_per_block() -> Weight {
        Weight::from_ref_time(3_777_000 as u64)
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: EthBridge ChallengePeriod (r:0 w:1)
    fn set_challenge_period() -> Weight {
        Weight::from_ref_time(3_797_000 as u64)
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: EthBridge ContractAddress (r:0 w:1)
    fn set_contract_address() -> Weight {
        Weight::from_ref_time(11_171_000 as u64)
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: EthBridge BridgePaused (r:0 w:1)
    fn set_bridge_paused() -> Weight {
        Weight::from_ref_time(3_847_000 as u64)
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: EthBridge NotarySetId (r:1 w:1)
    // Storage: System Digest (r:1 w:1)
    // Storage: EthBridge XrplDoorSigners (r:1 w:0)
    // Storage: EthBridge AuthoritiesChangedThisEra (r:0 w:1)
    // Storage: EthBridge NotaryXrplKeys (r:0 w:1)
    // Storage: EthBridge NotaryKeys (r:0 w:1)
    // Storage: EthBridge BridgePaused (r:0 w:1)
    fn finalise_authorities_change() -> Weight {
        Weight::from_ref_time(15_600_000 as u64)
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(6 as u64))
    }
    // Storage: EthBridge MissedMessageIds (r:1 w:1)
    fn remove_missing_event_id() -> Weight {
        Weight::from_ref_time(7_003_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: EthBridge Relayer (r:1 w:0)
    // Storage: EthBridge MissedMessageIds (r:1 w:0)
    // Storage: EthBridge PendingEventClaims (r:1 w:1)
    // Storage: EthBridge ChallengePeriod (r:1 w:0)
    // Storage: EthBridge MessagesValidAt (r:1 w:1)
    // Storage: EthBridge PendingClaimStatus (r:0 w:1)
    fn submit_missing_event() -> Weight {
        Weight::from_ref_time(23_405_000 as u64)
            .saturating_add(T::DbWeight::get().reads(5 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    // Storage: EthBridge Relayer (r:1 w:0)
    // Storage: EthBridge PendingEventClaims (r:1 w:1)
    // Storage: EthBridge ProcessedMessageIds (r:1 w:0)
    // Storage: EthBridge ChallengePeriod (r:1 w:0)
    // Storage: EthBridge MessagesValidAt (r:1 w:1)
    // Storage: EthBridge PendingClaimStatus (r:0 w:1)
    fn submit_event() -> Weight {
        Weight::from_ref_time(22_543_000 as u64)
            .saturating_add(T::DbWeight::get().reads(5 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    // Storage: EthBridge PendingEventClaims (r:1 w:0)
    // Storage: EthBridge PendingClaimStatus (r:1 w:1)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:2 w:2)
    // Storage: EthBridge PendingClaimChallenges (r:1 w:1)
    // Storage: EthBridge ChallengerAccount (r:0 w:1)
    fn submit_challenge() -> Weight {
        Weight::from_ref_time(65_424_000 as u64)
            .saturating_add(T::DbWeight::get().reads(9 as u64))
            .saturating_add(T::DbWeight::get().writes(9 as u64))
    }
    // Storage: EthBridge NotaryKeys (r:1 w:0)
    // Storage: EthBridge PendingClaimStatus (r:1 w:1)
    // Storage: Session Validators (r:1 w:0)
    // Storage: EthBridge EventNotarizations (r:2 w:1)
    // Storage: EthBridge PendingClaimChallenges (r:1 w:1)
    // Storage: EthBridge PendingEventClaims (r:1 w:0)
    // Storage: EthBridge Relayer (r:1 w:0)
    // Storage: EthBridge ChallengerAccount (r:1 w:1)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    fn submit_notarization() -> Weight {
        Weight::from_ref_time(90_962_000 as u64)
            .saturating_add(T::DbWeight::get().reads(14 as u64))
            .saturating_add(T::DbWeight::get().writes(9 as u64))
    }
}

/// For backwards compatibility and tests
impl WeightInfo for () {
    // Storage: EthBridge NotaryKeys (r:1 w:0)
    // Storage: EthBridge XrplDoorSigners (r:1 w:1)
    // Storage: EthBridge NotaryXrplKeys (r:0 w:1)
    /// The range of component `p` is `[1, 19]`.
    fn set_xrpl_door_signers(p: u32, ) -> Weight {
        Weight::from_ref_time(17_804_000 as u64)
            // Standard Error: 1_893
            .saturating_add(Weight::from_ref_time(866_563 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(2 as u64))
            .saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
    // Storage: EthBridge RelayerPaidBond (r:1 w:0)
    // Storage: EthBridge Relayer (r:0 w:1)
    fn set_relayer() -> Weight {
        Weight::from_ref_time(16_110_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    // Storage: EthBridge RelayerPaidBond (r:1 w:1)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:2 w:2)
    fn deposit_relayer_bond() -> Weight {
        Weight::from_ref_time(58_120_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(7 as u64))
            .saturating_add(RocksDbWeight::get().writes(7 as u64))
    }
    // Storage: EthBridge Relayer (r:1 w:0)
    // Storage: EthBridge RelayerPaidBond (r:1 w:1)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:2 w:2)
    fn withdraw_relayer_bond() -> Weight {
        Weight::from_ref_time(60_995_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(8 as u64))
            .saturating_add(RocksDbWeight::get().writes(7 as u64))
    }
    // Storage: EthBridge EventBlockConfirmations (r:0 w:1)
    fn set_event_block_confirmations() -> Weight {
        Weight::from_ref_time(3_727_000 as u64)
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    // Storage: EthBridge DelayedEventProofsPerBlock (r:0 w:1)
    fn set_delayed_event_proofs_per_block() -> Weight {
        Weight::from_ref_time(3_777_000 as u64)
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    // Storage: EthBridge ChallengePeriod (r:0 w:1)
    fn set_challenge_period() -> Weight {
        Weight::from_ref_time(3_797_000 as u64)
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    // Storage: EthBridge ContractAddress (r:0 w:1)
    fn set_contract_address() -> Weight {
        Weight::from_ref_time(11_171_000 as u64)
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    // Storage: EthBridge BridgePaused (r:0 w:1)
    fn set_bridge_paused() -> Weight {
        Weight::from_ref_time(3_847_000 as u64)
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    // Storage: EthBridge NotarySetId (r:1 w:1)
    // Storage: System Digest (r:1 w:1)
    // Storage: EthBridge XrplDoorSigners (r:1 w:0)
    // Storage: EthBridge AuthoritiesChangedThisEra (r:0 w:1)
    // Storage: EthBridge NotaryXrplKeys (r:0 w:1)
    // Storage: EthBridge NotaryKeys (r:0 w:1)
    // Storage: EthBridge BridgePaused (r:0 w:1)
    fn finalise_authorities_change() -> Weight {
        Weight::from_ref_time(15_600_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
            .saturating_add(RocksDbWeight::get().writes(6 as u64))
    }
    // Storage: EthBridge MissedMessageIds (r:1 w:1)
    fn remove_missing_event_id() -> Weight {
        Weight::from_ref_time(7_003_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    // Storage: EthBridge Relayer (r:1 w:0)
    // Storage: EthBridge MissedMessageIds (r:1 w:0)
    // Storage: EthBridge PendingEventClaims (r:1 w:1)
    // Storage: EthBridge ChallengePeriod (r:1 w:0)
    // Storage: EthBridge MessagesValidAt (r:1 w:1)
    // Storage: EthBridge PendingClaimStatus (r:0 w:1)
    fn submit_missing_event() -> Weight {
        Weight::from_ref_time(23_405_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(5 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    // Storage: EthBridge Relayer (r:1 w:0)
    // Storage: EthBridge PendingEventClaims (r:1 w:1)
    // Storage: EthBridge ProcessedMessageIds (r:1 w:0)
    // Storage: EthBridge ChallengePeriod (r:1 w:0)
    // Storage: EthBridge MessagesValidAt (r:1 w:1)
    // Storage: EthBridge PendingClaimStatus (r:0 w:1)
    fn submit_event() -> Weight {
        Weight::from_ref_time(22_543_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(5 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    // Storage: EthBridge PendingEventClaims (r:1 w:0)
    // Storage: EthBridge PendingClaimStatus (r:1 w:1)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:2 w:2)
    // Storage: EthBridge PendingClaimChallenges (r:1 w:1)
    // Storage: EthBridge ChallengerAccount (r:0 w:1)
    fn submit_challenge() -> Weight {
        Weight::from_ref_time(65_424_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(9 as u64))
            .saturating_add(RocksDbWeight::get().writes(9 as u64))
    }
    // Storage: EthBridge NotaryKeys (r:1 w:0)
    // Storage: EthBridge PendingClaimStatus (r:1 w:1)
    // Storage: Session Validators (r:1 w:0)
    // Storage: EthBridge EventNotarizations (r:2 w:1)
    // Storage: EthBridge PendingClaimChallenges (r:1 w:1)
    // Storage: EthBridge PendingEventClaims (r:1 w:0)
    // Storage: EthBridge Relayer (r:1 w:0)
    // Storage: EthBridge ChallengerAccount (r:1 w:1)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    fn submit_notarization() -> Weight {
        Weight::from_ref_time(90_962_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(14 as u64))
            .saturating_add(RocksDbWeight::get().writes(9 as u64))
    }
}
