// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_xls20
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-11-06, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-102-147`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-xls20
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./pallet/xls20/src/weights.rs
// --template
// ./scripts/pallet_template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_xls20.
pub trait WeightInfo {
	fn set_relayer() -> Weight;
	fn set_xls20_fee() -> Weight;
	fn enable_xls20_compatibility() -> Weight;
	fn re_request_xls20_mint() -> Weight;
	fn fulfill_xls20_mint() -> Weight;
	fn set_collection_mappings(i: u32, ) -> Weight;
	fn deposit_token_mint() -> Weight;
	fn deposit_token_create_collection() -> Weight;
}

/// Weights for pallet_xls20 using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: `Xls20::Relayer` (r:0 w:1)
	// Proof: `Xls20::Relayer` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	fn set_relayer() -> Weight {
		Weight::from_all(24_214_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Xls20::Xls20MintFee` (r:0 w:1)
	// Proof: `Xls20::Xls20MintFee` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_xls20_fee() -> Weight {
		Weight::from_all(23_606_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Nft::CollectionInfo` (r:1 w:1)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn enable_xls20_compatibility() -> Weight {
		Weight::from_all(42_893_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Migration::Status` (r:1 w:0)
	// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Nft::CollectionInfo` (r:1 w:0)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Xls20::Xls20TokenMap` (r:1 w:0)
	// Proof: `Xls20::Xls20TokenMap` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	// Storage: `Xls20::Xls20MintFee` (r:1 w:0)
	// Proof: `Xls20::Xls20MintFee` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn re_request_xls20_mint() -> Weight {
		Weight::from_all(62_296_000_u64)
			.saturating_add(T::DbWeight::get().reads(4_u64))
	}
	// Storage: `Migration::Status` (r:1 w:0)
	// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xls20::Relayer` (r:1 w:0)
	// Proof: `Xls20::Relayer` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:1 w:0)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Xls20::Xls20TokenMap` (r:1 w:1)
	// Proof: `Xls20::Xls20TokenMap` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn fulfill_xls20_mint() -> Weight {
		Weight::from_all(66_156_000_u64)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Xls20::CollectionMapping` (r:0 w:1)
	// Proof: `Xls20::CollectionMapping` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// The range of component `i` is `[0, 256]`.
	fn set_collection_mappings(i: u32, ) -> Weight {
		Weight::from_all(30_437_801_u64)
			// Standard Error: 1_889
			.saturating_add(Weight::from_all(3_223_038_u64).saturating_mul(i as u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Migration::Status` (r:1 w:0)
	// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xls20::CollectionMapping` (r:1 w:0)
	// Proof: `Xls20::CollectionMapping` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:1 w:1)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Xls20::Xls20TokenMap` (r:0 w:1)
	// Proof: `Xls20::Xls20TokenMap` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn deposit_token_mint() -> Weight {
		Weight::from_all(55_203_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `Migration::Status` (r:1 w:0)
	// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xls20::CollectionMapping` (r:1 w:1)
	// Proof: `Xls20::CollectionMapping` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	// Storage: `Nft::NextCollectionId` (r:1 w:1)
	// Proof: `Nft::NextCollectionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `EVM::AccountCodes` (r:1 w:1)
	// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Futurepass::DefaultProxy` (r:1 w:0)
	// Proof: `Futurepass::DefaultProxy` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `EVM::AccountCodesMetadata` (r:0 w:1)
	// Proof: `EVM::AccountCodesMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Xls20::Xls20TokenMap` (r:0 w:1)
	// Proof: `Xls20::Xls20TokenMap` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:0 w:1)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn deposit_token_create_collection() -> Weight {
		Weight::from_all(113_909_000_u64)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `Xls20::Relayer` (r:0 w:1)
	// Proof: `Xls20::Relayer` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	fn set_relayer() -> Weight {
		Weight::from_all(24_227_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `Xls20::Xls20MintFee` (r:0 w:1)
	// Proof: `Xls20::Xls20MintFee` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_xls20_fee() -> Weight {
		Weight::from_all(23_200_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `Nft::CollectionInfo` (r:1 w:1)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn enable_xls20_compatibility() -> Weight {
		Weight::from_all(42_686_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `Migration::Status` (r:1 w:0)
	// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Nft::CollectionInfo` (r:1 w:0)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Xls20::Xls20TokenMap` (r:1 w:0)
	// Proof: `Xls20::Xls20TokenMap` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	// Storage: `Xls20::Xls20MintFee` (r:1 w:0)
	// Proof: `Xls20::Xls20MintFee` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn re_request_xls20_mint() -> Weight {
		Weight::from_all(62_296_000_u64)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
	}
	// Storage: `Migration::Status` (r:1 w:0)
	// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xls20::Relayer` (r:1 w:0)
	// Proof: `Xls20::Relayer` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:1 w:0)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Xls20::Xls20TokenMap` (r:1 w:1)
	// Proof: `Xls20::Xls20TokenMap` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn fulfill_xls20_mint() -> Weight {
		Weight::from_all(66_156_000_u64)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `Xls20::CollectionMapping` (r:0 w:1)
	// Proof: `Xls20::CollectionMapping` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// The range of component `i` is `[0, 256]`.
	fn set_collection_mappings(i: u32, ) -> Weight {
		Weight::from_all(30_437_801_u64)
			// Standard Error: 1_889
			.saturating_add(Weight::from_all(3_223_038_u64).saturating_mul(i as u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `Migration::Status` (r:1 w:0)
	// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xls20::CollectionMapping` (r:1 w:0)
	// Proof: `Xls20::CollectionMapping` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:1 w:1)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Xls20::Xls20TokenMap` (r:0 w:1)
	// Proof: `Xls20::Xls20TokenMap` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn deposit_token_mint() -> Weight {
		Weight::from_all(55_203_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `Migration::Status` (r:1 w:0)
	// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xls20::CollectionMapping` (r:1 w:1)
	// Proof: `Xls20::CollectionMapping` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	// Storage: `Nft::NextCollectionId` (r:1 w:1)
	// Proof: `Nft::NextCollectionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `EVM::AccountCodes` (r:1 w:1)
	// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Futurepass::DefaultProxy` (r:1 w:0)
	// Proof: `Futurepass::DefaultProxy` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `EVM::AccountCodesMetadata` (r:0 w:1)
	// Proof: `EVM::AccountCodesMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Xls20::Xls20TokenMap` (r:0 w:1)
	// Proof: `Xls20::Xls20TokenMap` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:0 w:1)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn deposit_token_create_collection() -> Weight {
		Weight::from_all(113_909_000_u64)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
}

