// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_marketplace
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-19, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-102-147`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_marketplace
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./pallet/marketplace/src/weights.rs
// --template
// ./scripts/pallet_template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_marketplace.
pub trait WeightInfo {
    fn register_marketplace() -> Weight;
    fn sell_nft(p: u32) -> Weight;
    fn sell_sft(p: u32) -> Weight;
    fn buy() -> Weight;
    fn buy_multi(p: u32) -> Weight;
    fn auction_nft(p: u32) -> Weight;
    fn auction_sft(p: u32) -> Weight;
    fn bid() -> Weight;
    fn cancel_sale() -> Weight;
    fn update_fixed_price() -> Weight;
    fn make_simple_offer() -> Weight;
    fn cancel_offer() -> Weight;
    fn accept_offer() -> Weight;
    fn set_fee_to() -> Weight;
}

/// Weights for pallet_marketplace using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    // Storage: Marketplace NextMarketplaceId (r:1 w:1)
    // Storage: Marketplace RegisteredMarketplaces (r:0 w:1)
    fn register_marketplace() -> Weight {
        Weight::from_all(17_443_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
    // Storage: Nft CollectionInfo (r:1 w:0)
    // Storage: Marketplace FeeTo (r:1 w:0)
    // Storage: Marketplace NextListingId (r:1 w:1)
    // Storage: Nft TokenLocks (r:1 w:1)
    // Storage: Marketplace Listings (r:0 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    /// The range of component `p` is `[1, 50]`.
    fn sell_nft(p: u32, ) -> Weight {
        Weight::from_all(35_287_000 as u64)
            // Standard Error: 5_772
            .saturating_add(Weight::from_all(4_321_028 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
            .saturating_add(T::DbWeight::get().writes(5 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
    // Storage: Sft SftCollectionInfo (r:1 w:0)
    // Storage: Marketplace FeeTo (r:1 w:0)
    // Storage: Marketplace NextListingId (r:1 w:1)
    // Storage: Sft TokenInfo (r:1 w:1)
    // Storage: Marketplace Listings (r:0 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    /// The range of component `p` is `[1, 50]`.
    fn sell_sft(p: u32, ) -> Weight {
        Weight::from_all(30_478_000 as u64)
            // Standard Error: 10_308
            .saturating_add(Weight::from_all(3_429_769 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
            .saturating_add(T::DbWeight::get().writes(5 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
    // Storage: Marketplace Listings (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: Nft CollectionInfo (r:1 w:1)
    // Storage: TokenApprovals ERC721Approvals (r:0 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    // Storage: Nft TokenLocks (r:0 w:1)
    fn buy() -> Weight {
        Weight::from_all(67_648_000 as u64)
            .saturating_add(T::DbWeight::get().reads(5 as u64))
            .saturating_add(T::DbWeight::get().writes(9 as u64))
    }
    // Storage: Marketplace Listings (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: Nft CollectionInfo (r:1 w:1)
    // Storage: TokenApprovals ERC721Approvals (r:0 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    // Storage: Nft TokenLocks (r:0 w:1)
    /// The range of component `p` is `[1, 50]`.
    fn buy_multi(p: u32, ) -> Weight {
        Weight::from_all(68_079_000 as u64)
            // Standard Error: 35_746
            .saturating_add(Weight::from_all(49_491_228 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(5 as u64))
            .saturating_add(T::DbWeight::get().reads((5 as u64).saturating_mul(p as u64)))
            .saturating_add(T::DbWeight::get().writes(9 as u64))
            .saturating_add(T::DbWeight::get().writes((9 as u64).saturating_mul(p as u64)))
    }
    // Storage: Nft CollectionInfo (r:1 w:0)
    // Storage: Marketplace FeeTo (r:1 w:0)
    // Storage: Marketplace NextListingId (r:1 w:1)
    // Storage: Nft TokenLocks (r:1 w:1)
    // Storage: Marketplace Listings (r:0 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    /// The range of component `p` is `[1, 50]`.
    fn auction_nft(p: u32, ) -> Weight {
        Weight::from_all(32_782_000 as u64)
            // Standard Error: 5_794
            .saturating_add(Weight::from_all(4_306_919 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
            .saturating_add(T::DbWeight::get().writes(5 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
    // Storage: Sft SftCollectionInfo (r:1 w:0)
    // Storage: Marketplace FeeTo (r:1 w:0)
    // Storage: Marketplace NextListingId (r:1 w:1)
    // Storage: Sft TokenInfo (r:1 w:1)
    // Storage: Marketplace Listings (r:0 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    /// The range of component `p` is `[1, 50]`.
    fn auction_sft(p: u32, ) -> Weight {
        Weight::from_all(29_696_000 as u64)
            // Standard Error: 2_973
            .saturating_add(Weight::from_all(3_287_061 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
            .saturating_add(T::DbWeight::get().writes(5 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
    // Storage: Marketplace Listings (r:1 w:1)
    // Storage: Marketplace ListingWinningBid (r:1 w:1)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:2 w:2)
    // Storage: Marketplace ListingEndSchedule (r:0 w:2)
    fn bid() -> Weight {
        Weight::from_all(63_710_000 as u64)
            .saturating_add(T::DbWeight::get().reads(8 as u64))
            .saturating_add(T::DbWeight::get().writes(10 as u64))
    }
    // Storage: Marketplace Listings (r:1 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    // Storage: Nft TokenLocks (r:0 w:1)
    fn cancel_sale() -> Weight {
        Weight::from_all(20_930_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(4 as u64))
    }
    // Storage: Marketplace Listings (r:1 w:1)
    fn update_fixed_price() -> Weight {
        Weight::from_all(16_702_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: Nft CollectionInfo (r:1 w:0)
    // Storage: Marketplace NextOfferId (r:1 w:1)
    // Storage: Nft TokenLocks (r:1 w:0)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    // Storage: Marketplace TokenOffers (r:1 w:1)
    // Storage: Marketplace Offers (r:0 w:1)
    fn make_simple_offer() -> Weight {
        Weight::from_all(60_865_000 as u64)
            .saturating_add(T::DbWeight::get().reads(9 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    // Storage: Marketplace Offers (r:1 w:1)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    // Storage: Marketplace TokenOffers (r:1 w:1)
    fn cancel_offer() -> Weight {
        Weight::from_all(55_595_000 as u64)
            .saturating_add(T::DbWeight::get().reads(7 as u64))
            .saturating_add(T::DbWeight::get().writes(7 as u64))
    }
    // Storage: Marketplace Offers (r:1 w:1)
    // Storage: Nft CollectionInfo (r:1 w:1)
    // Storage: Nft TokenLocks (r:1 w:1)
    // Storage: Marketplace FeeTo (r:1 w:0)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    // Storage: Marketplace TokenOffers (r:1 w:1)
    // Storage: TokenApprovals ERC721Approvals (r:0 w:1)
    fn accept_offer() -> Weight {
        Weight::from_all(91_674_000 as u64)
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(10 as u64))
    }
    // Storage: Marketplace FeeTo (r:0 w:1)
    fn set_fee_to() -> Weight {
        Weight::from_all(10_069_000 as u64)
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    // Storage: Marketplace NextMarketplaceId (r:1 w:1)
    // Storage: Marketplace RegisteredMarketplaces (r:0 w:1)
    fn register_marketplace() -> Weight {
        Weight::from_all(17_443_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(2 as u64))
    }
    // Storage: Nft CollectionInfo (r:1 w:0)
    // Storage: Marketplace FeeTo (r:1 w:0)
    // Storage: Marketplace NextListingId (r:1 w:1)
    // Storage: Nft TokenLocks (r:1 w:1)
    // Storage: Marketplace Listings (r:0 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    /// The range of component `p` is `[1, 50]`.
    fn sell_nft(p: u32, ) -> Weight {
        Weight::from_all(35_287_000 as u64)
            // Standard Error: 5_772
            .saturating_add(Weight::from_all(4_321_028 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
            .saturating_add(RocksDbWeight::get().writes(5 as u64))
            .saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
    // Storage: Sft SftCollectionInfo (r:1 w:0)
    // Storage: Marketplace FeeTo (r:1 w:0)
    // Storage: Marketplace NextListingId (r:1 w:1)
    // Storage: Sft TokenInfo (r:1 w:1)
    // Storage: Marketplace Listings (r:0 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    /// The range of component `p` is `[1, 50]`.
    fn sell_sft(p: u32, ) -> Weight {
        Weight::from_all(30_478_000 as u64)
            // Standard Error: 10_308
            .saturating_add(Weight::from_all(3_429_769 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
            .saturating_add(RocksDbWeight::get().writes(5 as u64))
            .saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
    // Storage: Marketplace Listings (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: Nft CollectionInfo (r:1 w:1)
    // Storage: TokenApprovals ERC721Approvals (r:0 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    // Storage: Nft TokenLocks (r:0 w:1)
    fn buy() -> Weight {
        Weight::from_all(67_648_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(5 as u64))
            .saturating_add(RocksDbWeight::get().writes(9 as u64))
    }
    // Storage: Marketplace Listings (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: Nft CollectionInfo (r:1 w:1)
    // Storage: TokenApprovals ERC721Approvals (r:0 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    // Storage: Nft TokenLocks (r:0 w:1)
    /// The range of component `p` is `[1, 50]`.
    fn buy_multi(p: u32, ) -> Weight {
        Weight::from_all(68_079_000 as u64)
            // Standard Error: 35_746
            .saturating_add(Weight::from_all(49_491_228 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(5 as u64))
            .saturating_add(RocksDbWeight::get().reads((5 as u64).saturating_mul(p as u64)))
            .saturating_add(RocksDbWeight::get().writes(9 as u64))
            .saturating_add(RocksDbWeight::get().writes((9 as u64).saturating_mul(p as u64)))
    }
    // Storage: Nft CollectionInfo (r:1 w:0)
    // Storage: Marketplace FeeTo (r:1 w:0)
    // Storage: Marketplace NextListingId (r:1 w:1)
    // Storage: Nft TokenLocks (r:1 w:1)
    // Storage: Marketplace Listings (r:0 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    /// The range of component `p` is `[1, 50]`.
    fn auction_nft(p: u32, ) -> Weight {
        Weight::from_all(32_782_000 as u64)
            // Standard Error: 5_794
            .saturating_add(Weight::from_all(4_306_919 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
            .saturating_add(RocksDbWeight::get().writes(5 as u64))
            .saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
    // Storage: Sft SftCollectionInfo (r:1 w:0)
    // Storage: Marketplace FeeTo (r:1 w:0)
    // Storage: Marketplace NextListingId (r:1 w:1)
    // Storage: Sft TokenInfo (r:1 w:1)
    // Storage: Marketplace Listings (r:0 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    /// The range of component `p` is `[1, 50]`.
    fn auction_sft(p: u32, ) -> Weight {
        Weight::from_all(29_696_000 as u64)
            // Standard Error: 2_973
            .saturating_add(Weight::from_all(3_287_061 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
            .saturating_add(RocksDbWeight::get().writes(5 as u64))
            .saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
    // Storage: Marketplace Listings (r:1 w:1)
    // Storage: Marketplace ListingWinningBid (r:1 w:1)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:2 w:2)
    // Storage: Marketplace ListingEndSchedule (r:0 w:2)
    fn bid() -> Weight {
        Weight::from_all(63_710_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(8 as u64))
            .saturating_add(RocksDbWeight::get().writes(10 as u64))
    }
    // Storage: Marketplace Listings (r:1 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    // Storage: Nft TokenLocks (r:0 w:1)
    fn cancel_sale() -> Weight {
        Weight::from_all(20_930_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(4 as u64))
    }
    // Storage: Marketplace Listings (r:1 w:1)
    fn update_fixed_price() -> Weight {
        Weight::from_all(16_702_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    // Storage: Nft CollectionInfo (r:1 w:0)
    // Storage: Marketplace NextOfferId (r:1 w:1)
    // Storage: Nft TokenLocks (r:1 w:0)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    // Storage: Marketplace TokenOffers (r:1 w:1)
    // Storage: Marketplace Offers (r:0 w:1)
    fn make_simple_offer() -> Weight {
        Weight::from_all(60_865_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(9 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    // Storage: Marketplace Offers (r:1 w:1)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    // Storage: Marketplace TokenOffers (r:1 w:1)
    fn cancel_offer() -> Weight {
        Weight::from_all(55_595_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(7 as u64))
            .saturating_add(RocksDbWeight::get().writes(7 as u64))
    }
    // Storage: Marketplace Offers (r:1 w:1)
    // Storage: Nft CollectionInfo (r:1 w:1)
    // Storage: Nft TokenLocks (r:1 w:1)
    // Storage: Marketplace FeeTo (r:1 w:0)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    // Storage: Marketplace TokenOffers (r:1 w:1)
    // Storage: TokenApprovals ERC721Approvals (r:0 w:1)
    fn accept_offer() -> Weight {
        Weight::from_all(91_674_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(10 as u64))
    }
    // Storage: Marketplace FeeTo (r:0 w:1)
    fn set_fee_to() -> Weight {
        Weight::from_all(10_069_000 as u64)
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
}

