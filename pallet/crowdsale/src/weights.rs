// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_crowdsale
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-05-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-102-147`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-crowdsale
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./pallet/crowdsale/src/weights.rs
// --template
// ./scripts/pallet_template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_crowdsale.
pub trait WeightInfo {
	fn initialize() -> Weight;
	fn enable() -> Weight;
	fn participate() -> Weight;
	fn distribute_crowdsale_rewards() -> Weight;
	fn claim_voucher() -> Weight;
	fn redeem_voucher() -> Weight;
	fn proxy_vault_call() -> Weight;
	fn try_force_distribution() -> Weight;
	fn on_initialize(p: u32, ) -> Weight;
	fn on_initialize_empty() -> Weight;
}

/// Weights for pallet_crowdsale using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: `Crowdsale::NextSaleId` (r:1 w:1)
	// Proof: `Crowdsale::NextSaleId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:2 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:1 w:1)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Nft::PublicMintInfo` (r:1 w:0)
	// Proof: `Nft::PublicMintInfo` (`max_values`: None, `max_size`: Some(34), added: 2509, mode: `MaxEncodedLen`)
	// Storage: `AssetsExt::NextAssetId` (r:1 w:1)
	// Proof: `AssetsExt::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `EVM::AccountCodes` (r:1 w:1)
	// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Futurepass::DefaultProxy` (r:1 w:0)
	// Proof: `Futurepass::DefaultProxy` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Assets::Metadata` (r:1 w:1)
	// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:1 w:1)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `EVM::AccountCodesMetadata` (r:0 w:1)
	// Proof: `EVM::AccountCodesMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Crowdsale::SaleInfo` (r:0 w:1)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	fn initialize() -> Weight {
		Weight::from_all(287_741_000_u64)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(11_u64))
	}
	// Storage: `Crowdsale::SaleInfo` (r:1 w:1)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleEndBlocks` (r:1 w:1)
	// Proof: `Crowdsale::SaleEndBlocks` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	fn enable() -> Weight {
		Weight::from_all(59_200_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `Crowdsale::SaleInfo` (r:1 w:1)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:2 w:2)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleParticipation` (r:1 w:1)
	// Proof: `Crowdsale::SaleParticipation` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	fn participate() -> Weight {
		Weight::from_all(176_931_000_u64)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	// Storage: `Crowdsale::SaleDistribution` (r:1 w:1)
	// Proof: `Crowdsale::SaleDistribution` (`max_values`: Some(1), `max_size`: Some(16002), added: 16497, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleInfo` (r:1 w:1)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:1 w:0)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleParticipation` (r:2 w:1)
	// Proof: `Crowdsale::SaleParticipation` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:2 w:2)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::NextUnsignedAt` (r:0 w:1)
	// Proof: `Crowdsale::NextUnsignedAt` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn distribute_crowdsale_rewards() -> Weight {
		Weight::from_all(263_444_000_u64)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	// Storage: `Crowdsale::SaleInfo` (r:1 w:1)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleParticipation` (r:2 w:1)
	// Proof: `Crowdsale::SaleParticipation` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:1 w:0)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:2 w:2)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleDistribution` (r:1 w:1)
	// Proof: `Crowdsale::SaleDistribution` (`max_values`: Some(1), `max_size`: Some(16002), added: 16497, mode: `MaxEncodedLen`)
	fn claim_voucher() -> Weight {
		Weight::from_all(257_978_000_u64)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	// Storage: `Crowdsale::SaleInfo` (r:1 w:0)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:1 w:1)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:1 w:1)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Nft::PublicMintInfo` (r:1 w:0)
	// Proof: `Nft::PublicMintInfo` (`max_values`: None, `max_size`: Some(34), added: 2509, mode: `MaxEncodedLen`)
	fn redeem_voucher() -> Weight {
		Weight::from_all(189_765_000_u64)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: `Crowdsale::SaleInfo` (r:1 w:0)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `MaintenanceMode::BlockedCalls` (r:1 w:0)
	// Proof: `MaintenanceMode::BlockedCalls` (`max_values`: None, `max_size`: Some(111), added: 2586, mode: `MaxEncodedLen`)
	// Storage: `MaintenanceMode::BlockedPallets` (r:1 w:0)
	// Proof: `MaintenanceMode::BlockedPallets` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	fn proxy_vault_call() -> Weight {
		Weight::from_all(79_017_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	// Storage: `Crowdsale::SaleInfo` (r:1 w:1)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleDistribution` (r:1 w:1)
	// Proof: `Crowdsale::SaleDistribution` (`max_values`: Some(1), `max_size`: Some(16002), added: 16497, mode: `MaxEncodedLen`)
	fn try_force_distribution() -> Weight {
		Weight::from_all(53_497_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `Crowdsale::SaleEndBlocks` (r:1 w:1)
	// Proof: `Crowdsale::SaleEndBlocks` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleInfo` (r:5 w:5)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:10 w:10)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:20 w:20)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:6 w:6)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:5 w:0)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleDistribution` (r:1 w:1)
	// Proof: `Crowdsale::SaleDistribution` (`max_values`: Some(1), `max_size`: Some(16002), added: 16497, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 5]`.
	fn on_initialize(p: u32, ) -> Weight {
		Weight::from_all(55_353_636_u64)
			// Standard Error: 272_354
			.saturating_add(Weight::from_all(206_224_383_u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((9_u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((8_u64).saturating_mul(p as u64)))
	}
	// Storage: `Crowdsale::SaleEndBlocks` (r:1 w:0)
	// Proof: `Crowdsale::SaleEndBlocks` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	fn on_initialize_empty() -> Weight {
		Weight::from_all(9_592_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `Crowdsale::NextSaleId` (r:1 w:1)
	// Proof: `Crowdsale::NextSaleId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:2 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:1 w:1)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Nft::PublicMintInfo` (r:1 w:0)
	// Proof: `Nft::PublicMintInfo` (`max_values`: None, `max_size`: Some(34), added: 2509, mode: `MaxEncodedLen`)
	// Storage: `AssetsExt::NextAssetId` (r:1 w:1)
	// Proof: `AssetsExt::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `EVM::AccountCodes` (r:1 w:1)
	// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Futurepass::DefaultProxy` (r:1 w:0)
	// Proof: `Futurepass::DefaultProxy` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Assets::Metadata` (r:1 w:1)
	// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:1 w:1)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `EVM::AccountCodesMetadata` (r:0 w:1)
	// Proof: `EVM::AccountCodesMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Crowdsale::SaleInfo` (r:0 w:1)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	fn initialize() -> Weight {
		Weight::from_all(287_741_000_u64)
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(11_u64))
	}
	// Storage: `Crowdsale::SaleInfo` (r:1 w:1)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleEndBlocks` (r:1 w:1)
	// Proof: `Crowdsale::SaleEndBlocks` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	fn enable() -> Weight {
		Weight::from_all(59_200_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `Crowdsale::SaleInfo` (r:1 w:1)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:2 w:2)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleParticipation` (r:1 w:1)
	// Proof: `Crowdsale::SaleParticipation` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	fn participate() -> Weight {
		Weight::from_all(176_931_000_u64)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	// Storage: `Crowdsale::SaleDistribution` (r:1 w:1)
	// Proof: `Crowdsale::SaleDistribution` (`max_values`: Some(1), `max_size`: Some(16002), added: 16497, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleInfo` (r:1 w:1)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:1 w:0)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleParticipation` (r:2 w:1)
	// Proof: `Crowdsale::SaleParticipation` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:2 w:2)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::NextUnsignedAt` (r:0 w:1)
	// Proof: `Crowdsale::NextUnsignedAt` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn distribute_crowdsale_rewards() -> Weight {
		Weight::from_all(263_444_000_u64)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	// Storage: `Crowdsale::SaleInfo` (r:1 w:1)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleParticipation` (r:2 w:1)
	// Proof: `Crowdsale::SaleParticipation` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:1 w:0)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:2 w:2)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleDistribution` (r:1 w:1)
	// Proof: `Crowdsale::SaleDistribution` (`max_values`: Some(1), `max_size`: Some(16002), added: 16497, mode: `MaxEncodedLen`)
	fn claim_voucher() -> Weight {
		Weight::from_all(257_978_000_u64)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	// Storage: `Crowdsale::SaleInfo` (r:1 w:0)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:1 w:1)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:1 w:1)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:1 w:1)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Nft::PublicMintInfo` (r:1 w:0)
	// Proof: `Nft::PublicMintInfo` (`max_values`: None, `max_size`: Some(34), added: 2509, mode: `MaxEncodedLen`)
	fn redeem_voucher() -> Weight {
		Weight::from_all(189_765_000_u64)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	// Storage: `Crowdsale::SaleInfo` (r:1 w:0)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `MaintenanceMode::BlockedCalls` (r:1 w:0)
	// Proof: `MaintenanceMode::BlockedCalls` (`max_values`: None, `max_size`: Some(111), added: 2586, mode: `MaxEncodedLen`)
	// Storage: `MaintenanceMode::BlockedPallets` (r:1 w:0)
	// Proof: `MaintenanceMode::BlockedPallets` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	fn proxy_vault_call() -> Weight {
		Weight::from_all(79_017_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	// Storage: `Crowdsale::SaleInfo` (r:1 w:1)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleDistribution` (r:1 w:1)
	// Proof: `Crowdsale::SaleDistribution` (`max_values`: Some(1), `max_size`: Some(16002), added: 16497, mode: `MaxEncodedLen`)
	fn try_force_distribution() -> Weight {
		Weight::from_all(53_497_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `Crowdsale::SaleEndBlocks` (r:1 w:1)
	// Proof: `Crowdsale::SaleEndBlocks` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleInfo` (r:5 w:5)
	// Proof: `Crowdsale::SaleInfo` (`max_values`: None, `max_size`: Some(133), added: 2608, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:10 w:10)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:20 w:20)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:6 w:6)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:5 w:0)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Crowdsale::SaleDistribution` (r:1 w:1)
	// Proof: `Crowdsale::SaleDistribution` (`max_values`: Some(1), `max_size`: Some(16002), added: 16497, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 5]`.
	fn on_initialize(p: u32, ) -> Weight {
		Weight::from_all(55_353_636_u64)
			// Standard Error: 272_354
			.saturating_add(Weight::from_all(206_224_383_u64).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((9_u64).saturating_mul(p as u64)))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((8_u64).saturating_mul(p as u64)))
	}
	// Storage: `Crowdsale::SaleEndBlocks` (r:1 w:0)
	// Proof: `Crowdsale::SaleEndBlocks` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	fn on_initialize_empty() -> Weight {
		Weight::from_all(9_592_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
}

