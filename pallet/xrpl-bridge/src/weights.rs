//! Autogenerated weights for pallet_xrpl_bridge
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-19, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-117-113`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-xrpl-bridge
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template
// ./pallet_template.hbs
// --output
// ./output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_xrpl_bridge.
pub trait WeightInfo {
	fn submit_transaction() -> Weight;
	fn submit_challenge() -> Weight;
	fn withdraw_xrp() -> Weight;
	fn add_relayer() -> Weight;
	fn remove_relayer() -> Weight;
	fn set_door_tx_fee() -> Weight;
	fn set_door_address() -> Weight;
	fn set_ticket_sequence_next_allocation() -> Weight;
	fn set_ticket_sequence_current_allocation() -> Weight;
	fn on_runtime_upgrade() -> Weight;
	fn on_runtime_upgrade_no_change() -> Weight;
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: XRPLBridge Relayer (r:1 w:0)
	// Storage: XRPLBridge ProcessXRPTransactionDetails (r:1 w:1)
	// Storage: XRPLBridge ProcessXRPTransaction (r:1 w:1)
	fn submit_transaction() -> Weight {
		(62_158_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: XRPLBridge ChallengeXRPTransactionList (r:0 w:1)
	fn submit_challenge() -> Weight {
		(15_732_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: XRPLBridge DoorTxFee (r:1 w:0)
	// Storage: XRPLBridge DoorAddress (r:1 w:0)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:1 w:1)
	// Storage: XRPLBridge DoorTicketSequence (r:1 w:1)
	// Storage: XRPLBridge DoorTicketSequenceParams (r:1 w:1)
	// Storage: XRPLBridge DoorTicketSequenceParamsNext (r:1 w:1)
	// Storage: EthBridge NextEventProofId (r:1 w:1)
	// Storage: EthBridge BridgePaused (r:1 w:0)
	// Storage: System Digest (r:1 w:1)
	// Storage: XRPLBridge TicketSequenceThresholdReachedEmitted (r:0 w:1)
	fn withdraw_xrp() -> Weight {
		(140_060_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	// Storage: XRPLBridge Relayer (r:0 w:1)
	fn add_relayer() -> Weight {
		(37_719_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: XRPLBridge Relayer (r:1 w:1)
	fn remove_relayer() -> Weight {
		(45_694_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: XRPLBridge DoorTxFee (r:0 w:1)
	fn set_door_tx_fee() -> Weight {
		(11_858_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: XRPLBridge DoorAddress (r:0 w:1)
	fn set_door_address() -> Weight {
		(35_703_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: XRPLBridge Relayer (r:1 w:0)
	// Storage: XRPLBridge DoorTicketSequence (r:1 w:0)
	// Storage: XRPLBridge DoorTicketSequenceParams (r:1 w:0)
	// Storage: XRPLBridge DoorTicketSequenceParamsNext (r:0 w:1)
	fn set_ticket_sequence_next_allocation() -> Weight {
		(47_784_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: XRPLBridge DoorTicketSequence (r:1 w:1)
	// Storage: XRPLBridge DoorTicketSequenceParams (r:1 w:1)
	// Storage: XRPLBridge TicketSequenceThresholdReachedEmitted (r:0 w:1)
	fn set_ticket_sequence_current_allocation() -> Weight {
		(43_439_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: unknown [0xf359408206eb0939f15785224140c9c24e7b9012096b41c4eb3aaf947f6ea429] (r:1 w:1)
	// Storage: unknown [0xf359408206eb0939f15785224140c9c26c27d5145ffa0e115a3c9f4c85d12554] (r:0 w:1)
	fn on_runtime_upgrade() -> Weight {
		(26_026_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: unknown [0xf359408206eb0939f15785224140c9c24e7b9012096b41c4eb3aaf947f6ea429] (r:1 w:0)
	fn on_runtime_upgrade_no_change() -> Weight {
		(6_649_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
}
