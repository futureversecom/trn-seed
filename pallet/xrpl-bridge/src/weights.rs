// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_xrpl_bridge
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-25, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Surangas-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_xrpl_bridge
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output/pallet_xrpl_bridge_weights.rs
// --template
// ./scripts/pallet_template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_xrpl_bridge.
pub trait WeightInfo {
	fn submit_transaction() -> Weight;
	fn submit_challenge() -> Weight;
	fn withdraw_xrp() -> Weight;
	fn add_relayer() -> Weight;
	fn remove_relayer() -> Weight;
	fn set_door_tx_fee() -> Weight;
	fn set_door_address() -> Weight;
	fn set_ticket_sequence_next_allocation() -> Weight;
	fn set_ticket_sequence_current_allocation() -> Weight;
}

/// Weights for pallet_xrpl_bridge using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: XRPLBridge Relayer (r:1 w:0)
	// Storage: XRPLBridge ProcessXRPTransactionDetails (r:1 w:1)
	// Storage: XRPLBridge ProcessXRPTransaction (r:1 w:1)
	fn submit_transaction() -> Weight {
		Weight::from_ref_time(22_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: XRPLBridge ChallengeXRPTransactionList (r:0 w:1)
	fn submit_challenge() -> Weight {
		Weight::from_ref_time(5_000_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: XRPLBridge DoorTxFee (r:1 w:0)
	// Storage: XRPLBridge DoorAddress (r:1 w:0)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:1 w:1)
	// Storage: XRPLBridge DoorTicketSequence (r:1 w:1)
	// Storage: XRPLBridge DoorTicketSequenceParams (r:1 w:1)
	// Storage: XRPLBridge DoorTicketSequenceParamsNext (r:1 w:1)
	// Storage: EthBridge NextEventProofId (r:1 w:1)
	// Storage: EthBridge BridgePaused (r:1 w:0)
	// Storage: System Digest (r:1 w:1)
	// Storage: XRPLBridge TicketSequenceThresholdReachedEmitted (r:0 w:1)
	fn withdraw_xrp() -> Weight {
		Weight::from_ref_time(52_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: XRPLBridge Relayer (r:0 w:1)
	fn add_relayer() -> Weight {
		Weight::from_ref_time(13_000_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: XRPLBridge Relayer (r:1 w:1)
	fn remove_relayer() -> Weight {
		Weight::from_ref_time(17_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: XRPLBridge DoorTxFee (r:0 w:1)
	fn set_door_tx_fee() -> Weight {
		Weight::from_ref_time(4_000_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: XRPLBridge DoorAddress (r:0 w:1)
	fn set_door_address() -> Weight {
		Weight::from_ref_time(13_000_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: XRPLBridge Relayer (r:1 w:0)
	// Storage: XRPLBridge DoorTicketSequence (r:1 w:0)
	// Storage: XRPLBridge DoorTicketSequenceParams (r:1 w:0)
	// Storage: XRPLBridge DoorTicketSequenceParamsNext (r:0 w:1)
	fn set_ticket_sequence_next_allocation() -> Weight {
		Weight::from_ref_time(17_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: XRPLBridge DoorTicketSequence (r:1 w:1)
	// Storage: XRPLBridge DoorTicketSequenceParams (r:1 w:1)
	// Storage: XRPLBridge TicketSequenceThresholdReachedEmitted (r:0 w:1)
	fn set_ticket_sequence_current_allocation() -> Weight {
		Weight::from_ref_time(16_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: XRPLBridge Relayer (r:1 w:0)
	// Storage: XRPLBridge ProcessXRPTransactionDetails (r:1 w:1)
	// Storage: XRPLBridge ProcessXRPTransaction (r:1 w:1)
	fn submit_transaction() -> Weight {
		Weight::from_ref_time(22_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: XRPLBridge ChallengeXRPTransactionList (r:0 w:1)
	fn submit_challenge() -> Weight {
		Weight::from_ref_time(5_000_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: XRPLBridge DoorTxFee (r:1 w:0)
	// Storage: XRPLBridge DoorAddress (r:1 w:0)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:1 w:1)
	// Storage: XRPLBridge DoorTicketSequence (r:1 w:1)
	// Storage: XRPLBridge DoorTicketSequenceParams (r:1 w:1)
	// Storage: XRPLBridge DoorTicketSequenceParamsNext (r:1 w:1)
	// Storage: EthBridge NextEventProofId (r:1 w:1)
	// Storage: EthBridge BridgePaused (r:1 w:0)
	// Storage: System Digest (r:1 w:1)
	// Storage: XRPLBridge TicketSequenceThresholdReachedEmitted (r:0 w:1)
	fn withdraw_xrp() -> Weight {
		Weight::from_ref_time(52_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(8 as u64))
	}
	// Storage: XRPLBridge Relayer (r:0 w:1)
	fn add_relayer() -> Weight {
		Weight::from_ref_time(13_000_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: XRPLBridge Relayer (r:1 w:1)
	fn remove_relayer() -> Weight {
		Weight::from_ref_time(17_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: XRPLBridge DoorTxFee (r:0 w:1)
	fn set_door_tx_fee() -> Weight {
		Weight::from_ref_time(4_000_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: XRPLBridge DoorAddress (r:0 w:1)
	fn set_door_address() -> Weight {
		Weight::from_ref_time(13_000_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: XRPLBridge Relayer (r:1 w:0)
	// Storage: XRPLBridge DoorTicketSequence (r:1 w:0)
	// Storage: XRPLBridge DoorTicketSequenceParams (r:1 w:0)
	// Storage: XRPLBridge DoorTicketSequenceParamsNext (r:0 w:1)
	fn set_ticket_sequence_next_allocation() -> Weight {
		Weight::from_ref_time(17_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: XRPLBridge DoorTicketSequence (r:1 w:1)
	// Storage: XRPLBridge DoorTicketSequenceParams (r:1 w:1)
	// Storage: XRPLBridge TicketSequenceThresholdReachedEmitted (r:0 w:1)
	fn set_ticket_sequence_current_allocation() -> Weight {
		Weight::from_ref_time(16_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
}

