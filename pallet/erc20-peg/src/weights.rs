
//! Autogenerated weights for pallet_erc20_peg
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Xiankuns-MBP-2`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_erc20_peg
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output/pallet_erc20_peg_weights.rs
// --template
// ./scripts/pallet_template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_erc20_peg.
pub trait WeightInfo {
	fn activate_deposits() -> Weight;
	fn activate_withdrawals() -> Weight;
	fn withdraw() -> Weight;
	fn set_contract_address() -> Weight;
	fn set_erc20_meta() -> Weight;
	fn set_payment_delay() -> Weight;
}

/// Weights for pallet_erc20_peg using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Erc20Peg DepositsActive (r:0 w:1)
	/// Proof Skipped: Erc20Peg DepositsActive (max_values: Some(1), max_size: None, mode: Measured)
	fn activate_deposits() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Erc20Peg WithdrawalsActive (r:0 w:1)
	/// Proof Skipped: Erc20Peg WithdrawalsActive (max_values: Some(1), max_size: None, mode: Measured)
	fn activate_withdrawals() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Erc20Peg WithdrawalsActive (r:1 w:0)
	/// Proof Skipped: Erc20Peg WithdrawalsActive (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Erc20Peg AssetIdToErc20 (r:1 w:0)
	/// Proof Skipped: Erc20Peg AssetIdToErc20 (max_values: None, max_size: None, mode: Measured)
	/// Storage: Erc20Peg PaymentDelay (r:1 w:0)
	/// Proof Skipped: Erc20Peg PaymentDelay (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(162), added: 2637, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:1 w:1)
	/// Proof: Assets Account (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: Erc20Peg ContractAddress (r:1 w:0)
	/// Proof Skipped: Erc20Peg ContractAddress (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: EthBridge NextEventProofId (r:1 w:1)
	/// Proof Skipped: EthBridge NextEventProofId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: EthBridge NotaryKeys (r:1 w:0)
	/// Proof Skipped: EthBridge NotaryKeys (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: EthBridge NotarySetId (r:1 w:0)
	/// Proof Skipped: EthBridge NotarySetId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: EthBridge BridgePaused (r:1 w:0)
	/// Proof Skipped: EthBridge BridgePaused (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `780`
		//  Estimated: `31527`
		// Minimum execution time: 62_000_000 picoseconds.
		Weight::from_parts(64_000_000, 31527)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Erc20Peg ContractAddress (r:0 w:1)
	/// Proof Skipped: Erc20Peg ContractAddress (max_values: Some(1), max_size: None, mode: Measured)
	fn set_contract_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Erc20Peg Erc20Meta (r:0 w:1)
	/// Proof Skipped: Erc20Peg Erc20Meta (max_values: None, max_size: None, mode: Measured)
	fn set_erc20_meta() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Erc20Peg PaymentDelay (r:0 w:1)
	/// Proof Skipped: Erc20Peg PaymentDelay (max_values: None, max_size: None, mode: Measured)
	fn set_payment_delay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Erc20Peg DepositsActive (r:0 w:1)
	/// Proof Skipped: Erc20Peg DepositsActive (max_values: Some(1), max_size: None, mode: Measured)
	fn activate_deposits() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Erc20Peg WithdrawalsActive (r:0 w:1)
	/// Proof Skipped: Erc20Peg WithdrawalsActive (max_values: Some(1), max_size: None, mode: Measured)
	fn activate_withdrawals() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Erc20Peg WithdrawalsActive (r:1 w:0)
	/// Proof Skipped: Erc20Peg WithdrawalsActive (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Erc20Peg AssetIdToErc20 (r:1 w:0)
	/// Proof Skipped: Erc20Peg AssetIdToErc20 (max_values: None, max_size: None, mode: Measured)
	/// Storage: Erc20Peg PaymentDelay (r:1 w:0)
	/// Proof Skipped: Erc20Peg PaymentDelay (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(162), added: 2637, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:1 w:1)
	/// Proof: Assets Account (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: Erc20Peg ContractAddress (r:1 w:0)
	/// Proof Skipped: Erc20Peg ContractAddress (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: EthBridge NextEventProofId (r:1 w:1)
	/// Proof Skipped: EthBridge NextEventProofId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: EthBridge NotaryKeys (r:1 w:0)
	/// Proof Skipped: EthBridge NotaryKeys (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: EthBridge NotarySetId (r:1 w:0)
	/// Proof Skipped: EthBridge NotarySetId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: EthBridge BridgePaused (r:1 w:0)
	/// Proof Skipped: EthBridge BridgePaused (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `780`
		//  Estimated: `31527`
		// Minimum execution time: 62_000_000 picoseconds.
		Weight::from_parts(64_000_000, 31527)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Erc20Peg ContractAddress (r:0 w:1)
	/// Proof Skipped: Erc20Peg ContractAddress (max_values: Some(1), max_size: None, mode: Measured)
	fn set_contract_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Erc20Peg Erc20Meta (r:0 w:1)
	/// Proof Skipped: Erc20Peg Erc20Meta (max_values: None, max_size: None, mode: Measured)
	fn set_erc20_meta() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Erc20Peg PaymentDelay (r:0 w:1)
	/// Proof Skipped: Erc20Peg PaymentDelay (max_values: None, max_size: None, mode: Measured)
	fn set_payment_delay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
