// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_nft_peg
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-05-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-102-147`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-nft-peg
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./pallet/nft-peg/src/weights.rs
// --template
// ./scripts/pallet_template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_nft_peg.
pub trait WeightInfo {
	fn set_contract_address() -> Weight;
	fn withdraw() -> Weight;
	fn reclaim_blocked_nfts() -> Weight;
}

/// Weights for pallet_nft_peg using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: `NftPeg::ContractAddress` (r:0 w:1)
	// Proof: `NftPeg::ContractAddress` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	fn set_contract_address() -> Weight {
		Weight::from_all(25_600_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Nft::CollectionInfo` (r:1 w:1)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Nft::TokenLocks` (r:3 w:0)
	// Proof: `Nft::TokenLocks` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	// Storage: `NftPeg::RootNftToErc721` (r:1 w:0)
	// Proof: `NftPeg::RootNftToErc721` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	// Storage: `NftPeg::ContractAddress` (r:1 w:0)
	// Proof: `NftPeg::ContractAddress` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	// Storage: `EthBridge::NextEventProofId` (r:1 w:1)
	// Proof: `EthBridge::NextEventProofId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotaryKeys` (r:1 w:0)
	// Proof: `EthBridge::NotaryKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotarySetId` (r:1 w:0)
	// Proof: `EthBridge::NotarySetId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::BridgePaused` (r:1 w:0)
	// Proof: `EthBridge::BridgePaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `System::Digest` (r:1 w:1)
	// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TokenApprovals::ERC721Approvals` (r:0 w:3)
	// Proof: `TokenApprovals::ERC721Approvals` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	fn withdraw() -> Weight {
		Weight::from_all(156_478_000_u64)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: `NftPeg::BlockedTokens` (r:1 w:1)
	// Proof: `NftPeg::BlockedTokens` (`max_values`: None, `max_size`: Some(237), added: 2712, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:1 w:0)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `NftPeg::RootNftToErc721` (r:1 w:0)
	// Proof: `NftPeg::RootNftToErc721` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	// Storage: `NftPeg::ContractAddress` (r:1 w:0)
	// Proof: `NftPeg::ContractAddress` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	// Storage: `EthBridge::NextEventProofId` (r:1 w:1)
	// Proof: `EthBridge::NextEventProofId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotaryKeys` (r:1 w:0)
	// Proof: `EthBridge::NotaryKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotarySetId` (r:1 w:0)
	// Proof: `EthBridge::NotarySetId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::BridgePaused` (r:1 w:0)
	// Proof: `EthBridge::BridgePaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `System::Digest` (r:1 w:1)
	// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn reclaim_blocked_nfts() -> Weight {
		Weight::from_all(124_109_000_u64)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `NftPeg::ContractAddress` (r:0 w:1)
	// Proof: `NftPeg::ContractAddress` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	fn set_contract_address() -> Weight {
		Weight::from_all(25_600_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `Nft::CollectionInfo` (r:1 w:1)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `Nft::TokenLocks` (r:3 w:0)
	// Proof: `Nft::TokenLocks` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	// Storage: `NftPeg::RootNftToErc721` (r:1 w:0)
	// Proof: `NftPeg::RootNftToErc721` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	// Storage: `NftPeg::ContractAddress` (r:1 w:0)
	// Proof: `NftPeg::ContractAddress` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	// Storage: `EthBridge::NextEventProofId` (r:1 w:1)
	// Proof: `EthBridge::NextEventProofId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotaryKeys` (r:1 w:0)
	// Proof: `EthBridge::NotaryKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotarySetId` (r:1 w:0)
	// Proof: `EthBridge::NotarySetId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::BridgePaused` (r:1 w:0)
	// Proof: `EthBridge::BridgePaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `System::Digest` (r:1 w:1)
	// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TokenApprovals::ERC721Approvals` (r:0 w:3)
	// Proof: `TokenApprovals::ERC721Approvals` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	fn withdraw() -> Weight {
		Weight::from_all(156_478_000_u64)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	// Storage: `NftPeg::BlockedTokens` (r:1 w:1)
	// Proof: `NftPeg::BlockedTokens` (`max_values`: None, `max_size`: Some(237), added: 2712, mode: `MaxEncodedLen`)
	// Storage: `Nft::CollectionInfo` (r:1 w:0)
	// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	// Storage: `NftPeg::RootNftToErc721` (r:1 w:0)
	// Proof: `NftPeg::RootNftToErc721` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	// Storage: `NftPeg::ContractAddress` (r:1 w:0)
	// Proof: `NftPeg::ContractAddress` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	// Storage: `EthBridge::NextEventProofId` (r:1 w:1)
	// Proof: `EthBridge::NextEventProofId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotaryKeys` (r:1 w:0)
	// Proof: `EthBridge::NotaryKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::NotarySetId` (r:1 w:0)
	// Proof: `EthBridge::NotarySetId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `EthBridge::BridgePaused` (r:1 w:0)
	// Proof: `EthBridge::BridgePaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `System::Digest` (r:1 w:1)
	// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn reclaim_blocked_nfts() -> Weight {
		Weight::from_all(124_109_000_u64)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}

