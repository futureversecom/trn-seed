// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_dex
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-05-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-102-147`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-dex
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./pallet/dex/src/weights.rs
// --template
// ./scripts/pallet_template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_dex.
pub trait WeightInfo {
	fn swap_with_exact_supply() -> Weight;
	fn swap_with_exact_target() -> Weight;
	fn add_liquidity() -> Weight;
	fn remove_liquidity() -> Weight;
	fn reenable_trading_pair() -> Weight;
	fn disable_trading_pair() -> Weight;
	fn set_fee_to() -> Weight;
}

/// Weights for pallet_dex using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: `Dex::TradingPairStatuses` (r:1 w:0)
	// Proof: `Dex::TradingPairStatuses` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPool` (r:1 w:1)
	// Proof: `Dex::LiquidityPool` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:2 w:2)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:4 w:4)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `Dex::FeeTo` (r:1 w:0)
	// Proof: `Dex::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	// Storage: `Dex::TradingPairLPToken` (r:1 w:0)
	// Proof: `Dex::TradingPairLPToken` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPoolLastK` (r:1 w:1)
	// Proof: `Dex::LiquidityPoolLastK` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	fn swap_with_exact_supply() -> Weight {
		Weight::from_all(290_144_000_u64)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	// Storage: `Dex::TradingPairStatuses` (r:1 w:0)
	// Proof: `Dex::TradingPairStatuses` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPool` (r:1 w:1)
	// Proof: `Dex::LiquidityPool` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:3 w:2)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:4 w:4)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `Dex::FeeTo` (r:1 w:0)
	// Proof: `Dex::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	// Storage: `Dex::TradingPairLPToken` (r:1 w:0)
	// Proof: `Dex::TradingPairLPToken` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPoolLastK` (r:1 w:1)
	// Proof: `Dex::LiquidityPoolLastK` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	fn swap_with_exact_target() -> Weight {
		Weight::from_all(305_072_000_u64)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	// Storage: `Dex::TradingPairLPToken` (r:1 w:1)
	// Proof: `Dex::TradingPairLPToken` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	// Storage: `Assets::Metadata` (r:3 w:1)
	// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	// Storage: `AssetsExt::NextAssetId` (r:1 w:1)
	// Proof: `AssetsExt::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:3 w:3)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `EVM::AccountCodes` (r:1 w:1)
	// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Futurepass::DefaultProxy` (r:1 w:0)
	// Proof: `Futurepass::DefaultProxy` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:4 w:4)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPool` (r:1 w:1)
	// Proof: `Dex::LiquidityPool` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:6 w:6)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `Dex::FeeTo` (r:1 w:0)
	// Proof: `Dex::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPoolLastK` (r:1 w:1)
	// Proof: `Dex::LiquidityPoolLastK` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	// Storage: `EVM::AccountCodesMetadata` (r:0 w:1)
	// Proof: `EVM::AccountCodesMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Dex::TradingPairStatuses` (r:0 w:1)
	// Proof: `Dex::TradingPairStatuses` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn add_liquidity() -> Weight {
		Weight::from_all(522_758_000_u64)
			.saturating_add(T::DbWeight::get().reads(23_u64))
			.saturating_add(T::DbWeight::get().writes(21_u64))
	}
	// Storage: `Dex::TradingPairLPToken` (r:1 w:0)
	// Proof: `Dex::TradingPairLPToken` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:3 w:3)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:6 w:6)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPool` (r:1 w:1)
	// Proof: `Dex::LiquidityPool` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Dex::FeeTo` (r:1 w:0)
	// Proof: `Dex::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPoolLastK` (r:1 w:1)
	// Proof: `Dex::LiquidityPoolLastK` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	fn remove_liquidity() -> Weight {
		Weight::from_all(430_985_000_u64)
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
	}
	// Storage: `Dex::TradingPairLPToken` (r:1 w:0)
	// Proof: `Dex::TradingPairLPToken` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	// Storage: `Dex::TradingPairStatuses` (r:1 w:1)
	// Proof: `Dex::TradingPairStatuses` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn reenable_trading_pair() -> Weight {
		Weight::from_all(56_297_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Dex::TradingPairLPToken` (r:1 w:0)
	// Proof: `Dex::TradingPairLPToken` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	// Storage: `Dex::TradingPairStatuses` (r:1 w:1)
	// Proof: `Dex::TradingPairStatuses` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn disable_trading_pair() -> Weight {
		Weight::from_all(56_712_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `Dex::FeeTo` (r:0 w:1)
	// Proof: `Dex::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	fn set_fee_to() -> Weight {
		Weight::from_all(29_447_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `Dex::TradingPairStatuses` (r:1 w:0)
	// Proof: `Dex::TradingPairStatuses` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPool` (r:1 w:1)
	// Proof: `Dex::LiquidityPool` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:2 w:2)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:4 w:4)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `Dex::FeeTo` (r:1 w:0)
	// Proof: `Dex::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	// Storage: `Dex::TradingPairLPToken` (r:1 w:0)
	// Proof: `Dex::TradingPairLPToken` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPoolLastK` (r:1 w:1)
	// Proof: `Dex::LiquidityPoolLastK` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	fn swap_with_exact_supply() -> Weight {
		Weight::from_all(290_144_000_u64)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	// Storage: `Dex::TradingPairStatuses` (r:1 w:0)
	// Proof: `Dex::TradingPairStatuses` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPool` (r:1 w:1)
	// Proof: `Dex::LiquidityPool` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:3 w:2)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:4 w:4)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `Dex::FeeTo` (r:1 w:0)
	// Proof: `Dex::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	// Storage: `Dex::TradingPairLPToken` (r:1 w:0)
	// Proof: `Dex::TradingPairLPToken` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPoolLastK` (r:1 w:1)
	// Proof: `Dex::LiquidityPoolLastK` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	fn swap_with_exact_target() -> Weight {
		Weight::from_all(305_072_000_u64)
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	// Storage: `Dex::TradingPairLPToken` (r:1 w:1)
	// Proof: `Dex::TradingPairLPToken` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	// Storage: `Assets::Metadata` (r:3 w:1)
	// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	// Storage: `AssetsExt::NextAssetId` (r:1 w:1)
	// Proof: `AssetsExt::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:3 w:3)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `EVM::AccountCodes` (r:1 w:1)
	// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Futurepass::DefaultProxy` (r:1 w:0)
	// Proof: `Futurepass::DefaultProxy` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:4 w:4)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPool` (r:1 w:1)
	// Proof: `Dex::LiquidityPool` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:6 w:6)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `Dex::FeeTo` (r:1 w:0)
	// Proof: `Dex::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPoolLastK` (r:1 w:1)
	// Proof: `Dex::LiquidityPoolLastK` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	// Storage: `EVM::AccountCodesMetadata` (r:0 w:1)
	// Proof: `EVM::AccountCodesMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Dex::TradingPairStatuses` (r:0 w:1)
	// Proof: `Dex::TradingPairStatuses` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn add_liquidity() -> Weight {
		Weight::from_all(522_758_000_u64)
			.saturating_add(RocksDbWeight::get().reads(23_u64))
			.saturating_add(RocksDbWeight::get().writes(21_u64))
	}
	// Storage: `Dex::TradingPairLPToken` (r:1 w:0)
	// Proof: `Dex::TradingPairLPToken` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	// Storage: `Assets::Asset` (r:3 w:3)
	// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	// Storage: `Assets::Account` (r:6 w:6)
	// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPool` (r:1 w:1)
	// Proof: `Dex::LiquidityPool` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	// Storage: `Dex::FeeTo` (r:1 w:0)
	// Proof: `Dex::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	// Storage: `Dex::LiquidityPoolLastK` (r:1 w:1)
	// Proof: `Dex::LiquidityPoolLastK` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	fn remove_liquidity() -> Weight {
		Weight::from_all(430_985_000_u64)
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(12_u64))
	}
	// Storage: `Dex::TradingPairLPToken` (r:1 w:0)
	// Proof: `Dex::TradingPairLPToken` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	// Storage: `Dex::TradingPairStatuses` (r:1 w:1)
	// Proof: `Dex::TradingPairStatuses` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn reenable_trading_pair() -> Weight {
		Weight::from_all(56_297_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `Dex::TradingPairLPToken` (r:1 w:0)
	// Proof: `Dex::TradingPairLPToken` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	// Storage: `Dex::TradingPairStatuses` (r:1 w:1)
	// Proof: `Dex::TradingPairStatuses` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn disable_trading_pair() -> Weight {
		Weight::from_all(56_712_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `Dex::FeeTo` (r:0 w:1)
	// Proof: `Dex::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	fn set_fee_to() -> Weight {
		Weight::from_all(29_447_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

