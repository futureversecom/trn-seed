
//! Autogenerated weights for `pallet_migration`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-10-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Jasons-Ubuntu`, CPU: `AMD Ryzen 9 7950X 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain
// dev
// --steps=50
// --repeat=20
// --pallet=pallet-migration
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_echo.
pub trait WeightInfo {
	fn migrate() -> Weight;
	fn current_migration_step() -> Weight;
	fn enable_migration() -> Weight;
}

/// Weights for pallet_marketplace using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Migration::Status` (r:1 w:1)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `Measured`)
	/// Storage: `Migration::MigrationEnabled` (r:1 w:0)
	/// Proof: `Migration::MigrationEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `Measured`)
	/// Storage: `Migration::LastKey` (r:1 w:1)
	/// Proof: `Migration::LastKey` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Xls20::Xls20TokenMap` (r:1 w:0)
	/// Proof: `Xls20::Xls20TokenMap` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `Measured`)
	fn migrate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `98`
		//  Estimated: `3563`
		// Minimum execution time: 11_913_000 picoseconds.
		Weight::from_parts(12_443_000, 0)
			.saturating_add(Weight::from_parts(0, 3563))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Xls20::Xls20TokenMap` (r:2 w:1)
	/// Proof: `Xls20::Xls20TokenMap` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn current_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `120`
		//  Estimated: `6052`
		// Minimum execution time: 7_244_000 picoseconds.
		Weight::from_parts(7_444_000, 0)
			.saturating_add(Weight::from_parts(0, 6052))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Migration::MigrationEnabled` (r:0 w:1)
	/// Proof: `Migration::MigrationEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn enable_migration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_560_000 picoseconds.
		Weight::from_parts(6_061_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

impl WeightInfo for () {
	/// Storage: `Migration::Status` (r:1 w:1)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `Measured`)
	/// Storage: `Migration::MigrationEnabled` (r:1 w:0)
	/// Proof: `Migration::MigrationEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `Measured`)
	/// Storage: `Migration::LastKey` (r:1 w:1)
	/// Proof: `Migration::LastKey` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Xls20::Xls20TokenMap` (r:1 w:0)
	/// Proof: `Xls20::Xls20TokenMap` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `Measured`)
	fn migrate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `98`
		//  Estimated: `3563`
		// Minimum execution time: 11_913_000 picoseconds.
		Weight::from_parts(12_443_000, 0)
			.saturating_add(Weight::from_parts(0, 3563))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: `Xls20::Xls20TokenMap` (r:2 w:1)
	/// Proof: `Xls20::Xls20TokenMap` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn current_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `120`
		//  Estimated: `6052`
		// Minimum execution time: 7_244_000 picoseconds.
		Weight::from_parts(7_444_000, 0)
			.saturating_add(Weight::from_parts(0, 6052))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `Migration::MigrationEnabled` (r:0 w:1)
	/// Proof: `Migration::MigrationEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn enable_migration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_560_000 picoseconds.
		Weight::from_parts(6_061_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}