
//! Autogenerated weights for `pallet_sft`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-25, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Surangas-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain
// dev
// --steps=50
// --repeat=20
// --pallet=pallet_sft
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};

/// Weight functions needed for pallet_sft.
pub trait WeightInfo {
    fn create_collection() -> Weight;
    fn create_token() -> Weight;
    fn mint() -> Weight;
    fn transfer() -> Weight;
    fn burn() -> Weight;
    fn set_owner() -> Weight;
    fn set_max_issuance() -> Weight;
    fn set_base_uri() -> Weight;
}

/// Weights for pallet_sft using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Nft NextCollectionId (r:1 w:1)
	// Storage: EVM AccountCodes (r:1 w:1)
	// Storage: Futurepass DefaultProxy (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Sft SftCollectionInfo (r:0 w:1)
	fn create_collection() -> Weight {
		Weight::from_ref_time(31_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Sft SftCollectionInfo (r:1 w:1)
	// Storage: Sft TokenInfo (r:0 w:1)
	fn create_token() -> Weight {
		Weight::from_ref_time(20_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Sft SftCollectionInfo (r:1 w:0)
	// Storage: Sft TokenInfo (r:1 w:1)
	fn mint() -> Weight {
		Weight::from_ref_time(21_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Sft TokenInfo (r:1 w:1)
	fn transfer() -> Weight {
		Weight::from_ref_time(18_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Sft TokenInfo (r:1 w:1)
	fn burn() -> Weight {
		Weight::from_ref_time(21_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Sft SftCollectionInfo (r:1 w:1)
	fn set_owner() -> Weight {
		Weight::from_ref_time(18_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Sft SftCollectionInfo (r:1 w:0)
	// Storage: Sft TokenInfo (r:1 w:1)
	fn set_max_issuance() -> Weight {
		Weight::from_ref_time(19_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Sft SftCollectionInfo (r:1 w:1)
	fn set_base_uri() -> Weight {
		Weight::from_ref_time(17_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Nft NextCollectionId (r:1 w:1)
	// Storage: EVM AccountCodes (r:1 w:1)
	// Storage: Futurepass DefaultProxy (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Sft SftCollectionInfo (r:0 w:1)
	fn create_collection() -> Weight {
		Weight::from_ref_time(31_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Sft SftCollectionInfo (r:1 w:1)
	// Storage: Sft TokenInfo (r:0 w:1)
	fn create_token() -> Weight {
		Weight::from_ref_time(20_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Sft SftCollectionInfo (r:1 w:0)
	// Storage: Sft TokenInfo (r:1 w:1)
	fn mint() -> Weight {
		Weight::from_ref_time(21_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Sft TokenInfo (r:1 w:1)
	fn transfer() -> Weight {
		Weight::from_ref_time(18_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Sft TokenInfo (r:1 w:1)
	fn burn() -> Weight {
		Weight::from_ref_time(21_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Sft SftCollectionInfo (r:1 w:1)
	fn set_owner() -> Weight {
		Weight::from_ref_time(18_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Sft SftCollectionInfo (r:1 w:0)
	// Storage: Sft TokenInfo (r:1 w:1)
	fn set_max_issuance() -> Weight {
		Weight::from_ref_time(19_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Sft SftCollectionInfo (r:1 w:1)
	fn set_base_uri() -> Weight {
		Weight::from_ref_time(17_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
}
