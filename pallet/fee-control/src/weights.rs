//! Autogenerated weights for pallet_fee_control
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-19, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-117-113`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-fee-control
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template
// ./pallet_template.hbs
// --output
// ./output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_fee_control.
pub trait WeightInfo {
	fn set_evm_base_fee() -> Weight;
	fn set_extrinsic_weight_to_fee_factor() -> Weight;
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: FeeControl EvmBaseFeePerGas (r:0 w:1)
	fn set_evm_base_fee() -> Weight {
		(11_154_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: FeeControl ExtrinsicWeightToFee (r:0 w:1)
	fn set_extrinsic_weight_to_fee_factor() -> Weight {
		(10_618_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
