// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_sylo_data_permissions
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-04-06, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Johns-Macbook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-sylo-data-permissions
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./pallet/sylo-data-permissions/src/weights.rs
// --template
// ./scripts/pallet_template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_sylo_data_permissions.
pub trait WeightInfo {
	fn grant_data_permissions(p: u32, ) -> Weight;
	fn revoke_data_permission() -> Weight;
	fn grant_tagged_permissions(p: u32, ) -> Weight;
	fn revoke_tagged_permissions() -> Weight;
	fn grant_permission_reference() -> Weight;
	fn revoke_permission_reference() -> Weight;
}

/// Weights for pallet_sylo_data_permissions using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: `SyloDataPermissions::NextPermissionRecordId` (r:1 w:1)
	// Proof: `SyloDataPermissions::NextPermissionRecordId` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	// Storage: `SyloDataVerification::ValidationRecords` (r:1 w:0)
	// Proof: `SyloDataVerification::ValidationRecords` (`max_values`: None, `max_size`: Some(19724), added: 22199, mode: `MaxEncodedLen`)
	// Storage: `SyloDataPermissions::PermissionRecords` (r:1 w:1)
	// Proof: `SyloDataPermissions::PermissionRecords` (`max_values`: None, `max_size`: Some(4068), added: 6543, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 100]`.
	fn grant_data_permissions(p: u32, ) -> Weight {
		Weight::from_all(26_000_000)
			// Standard Error: 18_620
			.saturating_add(Weight::from_all(15_886_288_u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `SyloDataPermissions::PermissionRecords` (r:1 w:1)
	// Proof: `SyloDataPermissions::PermissionRecords` (`max_values`: None, `max_size`: Some(4068), added: 6543, mode: `MaxEncodedLen`)
	fn revoke_data_permission() -> Weight {
		Weight::from_all(22_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `SyloDataPermissions::NextPermissionRecordId` (r:1 w:1)
	// Proof: `SyloDataPermissions::NextPermissionRecordId` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	// Storage: `SyloDataPermissions::TaggedPermissionRecords` (r:1 w:1)
	// Proof: `SyloDataPermissions::TaggedPermissionRecords` (`max_values`: None, `max_size`: Some(503658), added: 506133, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 100]`.
	fn grant_tagged_permissions(p: u32, ) -> Weight {
		Weight::from_all(21_009_116)
			// Standard Error: 1_519
			.saturating_add(Weight::from_all(18_050_u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `SyloDataPermissions::TaggedPermissionRecords` (r:1 w:1)
	// Proof: `SyloDataPermissions::TaggedPermissionRecords` (`max_values`: None, `max_size`: Some(503658), added: 506133, mode: `MaxEncodedLen`)
	fn revoke_tagged_permissions() -> Weight {
		Weight::from_all(17_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `SyloDataVerification::ValidationRecords` (r:1 w:0)
	// Proof: `SyloDataVerification::ValidationRecords` (`max_values`: None, `max_size`: Some(19724), added: 22199, mode: `MaxEncodedLen`)
	// Storage: `SyloDataPermissions::PermissionReferences` (r:0 w:1)
	// Proof: `SyloDataPermissions::PermissionReferences` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
	fn grant_permission_reference() -> Weight {
		Weight::from_all(17_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `SyloDataPermissions::PermissionReferences` (r:1 w:1)
	// Proof: `SyloDataPermissions::PermissionReferences` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
	fn revoke_permission_reference() -> Weight {
		Weight::from_all(17_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `SyloDataPermissions::NextPermissionRecordId` (r:1 w:1)
	// Proof: `SyloDataPermissions::NextPermissionRecordId` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	// Storage: `SyloDataVerification::ValidationRecords` (r:1 w:0)
	// Proof: `SyloDataVerification::ValidationRecords` (`max_values`: None, `max_size`: Some(19724), added: 22199, mode: `MaxEncodedLen`)
	// Storage: `SyloDataPermissions::PermissionRecords` (r:1 w:1)
	// Proof: `SyloDataPermissions::PermissionRecords` (`max_values`: None, `max_size`: Some(4068), added: 6543, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 100]`.
	fn grant_data_permissions(p: u32, ) -> Weight {
		Weight::from_all(26_000_000)
			// Standard Error: 18_620
			.saturating_add(Weight::from_all(15_886_288_u64).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: `SyloDataPermissions::PermissionRecords` (r:1 w:1)
	// Proof: `SyloDataPermissions::PermissionRecords` (`max_values`: None, `max_size`: Some(4068), added: 6543, mode: `MaxEncodedLen`)
	fn revoke_data_permission() -> Weight {
		Weight::from_all(22_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: `SyloDataPermissions::NextPermissionRecordId` (r:1 w:1)
	// Proof: `SyloDataPermissions::NextPermissionRecordId` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	// Storage: `SyloDataPermissions::TaggedPermissionRecords` (r:1 w:1)
	// Proof: `SyloDataPermissions::TaggedPermissionRecords` (`max_values`: None, `max_size`: Some(503658), added: 506133, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 100]`.
	fn grant_tagged_permissions(p: u32, ) -> Weight {
		Weight::from_all(21_009_116)
			// Standard Error: 1_519
			.saturating_add(Weight::from_all(18_050_u64).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: `SyloDataPermissions::TaggedPermissionRecords` (r:1 w:1)
	// Proof: `SyloDataPermissions::TaggedPermissionRecords` (`max_values`: None, `max_size`: Some(503658), added: 506133, mode: `MaxEncodedLen`)
	fn revoke_tagged_permissions() -> Weight {
		Weight::from_all(17_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: `SyloDataVerification::ValidationRecords` (r:1 w:0)
	// Proof: `SyloDataVerification::ValidationRecords` (`max_values`: None, `max_size`: Some(19724), added: 22199, mode: `MaxEncodedLen`)
	// Storage: `SyloDataPermissions::PermissionReferences` (r:0 w:1)
	// Proof: `SyloDataPermissions::PermissionReferences` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
	fn grant_permission_reference() -> Weight {
		Weight::from_all(17_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: `SyloDataPermissions::PermissionReferences` (r:1 w:1)
	// Proof: `SyloDataPermissions::PermissionReferences` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
	fn revoke_permission_reference() -> Weight {
		Weight::from_all(17_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}

