
//! Autogenerated weights for `pallet_liquidity_pools`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-08-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-102-147`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-liquidity-pools
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./runtime/src/weights/pallet_liquidity_pools.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_liquidity_pools`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_liquidity_pools::WeightInfo for WeightInfo<T> {
	/// Storage: `LiquidityPools::NextPoolId` (r:1 w:1)
	/// Proof: `LiquidityPools::NextPoolId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Metadata` (r:2 w:0)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::Pools` (r:0 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `MaxEncodedLen`)
	fn create_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `640`
		//  Estimated: `6220`
		// Minimum execution time: 160_544_000 picoseconds.
		Weight::from_parts(161_686_000, 0)
			.saturating_add(Weight::from_parts(0, 6220))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::PoolUsers` (r:2 w:0)
	/// Proof: `LiquidityPools::PoolUsers` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::ClosingPools` (r:0 w:1)
	/// Proof: `LiquidityPools::ClosingPools` (`max_values`: None, `max_size`: Some(152), added: 2627, mode: `MaxEncodedLen`)
	fn close_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `319`
		//  Estimated: `6088`
		// Minimum execution time: 72_674_000 picoseconds.
		Weight::from_parts(74_457_000, 0)
			.saturating_add(Weight::from_parts(0, 6088))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `LiquidityPools::Pools` (r:2 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::PoolRelationships` (r:0 w:1)
	/// Proof: `LiquidityPools::PoolRelationships` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn set_pool_succession() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `327`
		//  Estimated: `6126`
		// Minimum execution time: 50_622_000 picoseconds.
		Weight::from_parts(51_759_000, 0)
			.saturating_add(Weight::from_parts(0, 6126))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `LiquidityPools::Pools` (r:1 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::PoolUsers` (r:1 w:1)
	/// Proof: `LiquidityPools::PoolUsers` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn set_pool_rollover() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `319`
		//  Estimated: `3558`
		// Minimum execution time: 50_176_000 picoseconds.
		Weight::from_parts(51_614_000, 0)
			.saturating_add(Weight::from_parts(0, 3558))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::PoolUsers` (r:1 w:1)
	/// Proof: `LiquidityPools::PoolUsers` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	fn enter_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `982`
		//  Estimated: `6172`
		// Minimum execution time: 172_395_000 picoseconds.
		Weight::from_parts(180_971_000, 0)
			.saturating_add(Weight::from_parts(0, 6172))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::PoolUsers` (r:1 w:1)
	/// Proof: `LiquidityPools::PoolUsers` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn exit_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `990`
		//  Estimated: `6172`
		// Minimum execution time: 178_797_000 picoseconds.
		Weight::from_parts(182_531_000, 0)
			.saturating_add(Weight::from_parts(0, 6172))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::PoolUsers` (r:1 w:1)
	/// Proof: `LiquidityPools::PoolUsers` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Metadata` (r:2 w:0)
	/// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:2 w:2)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:4 w:4)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn claim_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1263`
		//  Estimated: `11330`
		// Minimum execution time: 270_731_000 picoseconds.
		Weight::from_parts(275_660_000, 0)
			.saturating_add(Weight::from_parts(0, 11330))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	/// Storage: `LiquidityPools::Pools` (r:1 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::NextRolloverUnsignedAt` (r:0 w:1)
	/// Proof: `LiquidityPools::NextRolloverUnsignedAt` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn rollover_unsigned() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `327`
		//  Estimated: `3558`
		// Minimum execution time: 37_368_000 picoseconds.
		Weight::from_parts(38_514_000, 0)
			.saturating_add(Weight::from_parts(0, 3558))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `LiquidityPools::PoolUsers` (r:1 w:1)
	/// Proof: `LiquidityPools::PoolUsers` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn emergency_recover_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `990`
		//  Estimated: `6172`
		// Minimum execution time: 182_957_000 picoseconds.
		Weight::from_parts(186_974_000, 0)
			.saturating_add(Weight::from_parts(0, 6172))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `LiquidityPools::Pools` (r:1 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::UrgentPoolUpdates` (r:1 w:1)
	/// Proof: `LiquidityPools::UrgentPoolUpdates` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	fn trigger_pool_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `222`
		//  Estimated: `3558`
		// Minimum execution time: 57_095_000 picoseconds.
		Weight::from_parts(57_967_000, 0)
			.saturating_add(Weight::from_parts(0, 3558))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// The range of component `n` is `[1, 10]`.
	fn process_closing_pools(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_900_000 picoseconds.
		Weight::from_parts(2_311_979, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1_719
			.saturating_add(Weight::from_parts(25_205, 0).saturating_mul(n.into()))
	}
	/// Storage: `LiquidityPools::ClosingPools` (r:1 w:1)
	/// Proof: `LiquidityPools::ClosingPools` (`max_values`: None, `max_size`: Some(152), added: 2627, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::PoolUsers` (r:2 w:1)
	/// Proof: `LiquidityPools::PoolUsers` (`max_values`: None, `max_size`: Some(74), added: 2549, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:2 w:2)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:4 w:4)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::RolloverPivot` (r:0 w:1)
	/// Proof: `LiquidityPools::RolloverPivot` (`max_values`: None, `max_size`: Some(1014), added: 3489, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::PoolRelationships` (r:0 w:1)
	/// Proof: `LiquidityPools::PoolRelationships` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn process_closure_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1280`
		//  Estimated: `11330`
		// Minimum execution time: 315_067_000 picoseconds.
		Weight::from_parts(316_897_000, 0)
			.saturating_add(Weight::from_parts(0, 11330))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(13))
	}
}
