//! Autogenerated weights for `pallet_nft_peg`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-28, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-101-56`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_nft_peg
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./runtime/src/weights/pallet_nft_peg.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_nft_peg`.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_nft_peg::WeightInfo for WeightInfo<T> {
    // Storage: NftPeg ContractAddress (r:0 w:1)
    fn set_contract_address() -> Weight {
        Weight::from_ref_time(18_795_000 as u64)
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: NftPeg ContractAddress (r:1 w:0)
    // Storage: EthBridge NextEventProofId (r:1 w:1)
    // Storage: EthBridge NotaryKeys (r:1 w:0)
    // Storage: EthBridge NotarySetId (r:1 w:0)
    // Storage: EthBridge BridgePaused (r:1 w:0)
    // Storage: System Digest (r:1 w:1)
    // Storage: Nft CollectionInfo (r:1 w:1)
    // Storage: Nft TokenLocks (r:3 w:0)
    // Storage: NftPeg RootNftToErc721 (r:1 w:0)
    // Storage: TokenApprovals ERC721Approvals (r:0 w:3)
    /// The range of component `p` is `[0, 50]`.
    fn withdraw(p: u32) -> Weight {
        Weight::from_ref_time(45_436_000 as u64)
            // Standard Error: 175_898
            .saturating_add(Weight::from_ref_time(9_025_709 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(6 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
    // Storage: NftPeg BlockedTokens (r:1 w:1)
    // Storage: Nft CollectionInfo (r:1 w:0)
    // Storage: NftPeg RootNftToErc721 (r:1 w:0)
    // Storage: NftPeg ContractAddress (r:1 w:0)
    // Storage: EthBridge NextEventProofId (r:1 w:1)
    // Storage: EthBridge NotaryKeys (r:1 w:0)
    // Storage: EthBridge NotarySetId (r:1 w:0)
    // Storage: EthBridge BridgePaused (r:1 w:0)
    // Storage: System Digest (r:1 w:1)
    fn reclaim_blocked_nfts() -> Weight {
        Weight::from_ref_time(138_429_000 as u64)
            .saturating_add(T::DbWeight::get().reads(9 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
}
