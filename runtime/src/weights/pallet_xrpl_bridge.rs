
//! Autogenerated weights for `pallet_xrpl_bridge`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Xiankuns-MBP-2`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_xrpl_bridge
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output/pallet_xrpl_bridge.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_xrpl_bridge`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_xrpl_bridge::WeightInfo for WeightInfo<T> {
	/// Storage: XRPLBridge Relayer (r:1 w:0)
	/// Proof: XRPLBridge Relayer (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: XRPLBridge ProcessXRPTransactionDetails (r:1 w:1)
	/// Proof: XRPLBridge ProcessXRPTransactionDetails (max_values: None, max_size: Some(233), added: 2708, mode: MaxEncodedLen)
	/// Storage: XRPLBridge ProcessXRPTransaction (r:1 w:1)
	/// Proof: XRPLBridge ProcessXRPTransaction (max_values: None, max_size: Some(64000016), added: 64002491, mode: MaxEncodedLen)
	fn submit_transaction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `242`
		//  Estimated: `64010681`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(21_000_000, 0)
			.saturating_add(Weight::from_parts(0, 64010681))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: XRPLBridge ChallengeXRPTransactionList (r:0 w:1)
	/// Proof: XRPLBridge ChallengeXRPTransactionList (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn submit_challenge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: XRPLBridge DoorTxFee (r:1 w:0)
	/// Proof: XRPLBridge DoorTxFee (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: XRPLBridge DoorAddress (r:1 w:0)
	/// Proof: XRPLBridge DoorAddress (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(162), added: 2637, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:1 w:1)
	/// Proof: Assets Account (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: XRPLBridge DoorTicketSequence (r:1 w:1)
	/// Proof: XRPLBridge DoorTicketSequence (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: XRPLBridge DoorTicketSequenceParams (r:1 w:1)
	/// Proof: XRPLBridge DoorTicketSequenceParams (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: XRPLBridge DoorTicketSequenceParamsNext (r:1 w:1)
	/// Proof: XRPLBridge DoorTicketSequenceParamsNext (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: EthBridge NextEventProofId (r:1 w:1)
	/// Proof Skipped: EthBridge NextEventProofId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: EthBridge BridgePaused (r:1 w:0)
	/// Proof Skipped: EthBridge BridgePaused (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: XRPLBridge TicketSequenceThresholdReachedEmitted (r:0 w:1)
	/// Proof: XRPLBridge TicketSequenceThresholdReachedEmitted (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn withdraw_xrp() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1032`
		//  Estimated: `22206`
		// Minimum execution time: 57_000_000 picoseconds.
		Weight::from_parts(59_000_000, 0)
			.saturating_add(Weight::from_parts(0, 22206))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: XRPLBridge Relayer (r:0 w:1)
	/// Proof: XRPLBridge Relayer (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	fn add_relayer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: XRPLBridge Relayer (r:1 w:1)
	/// Proof: XRPLBridge Relayer (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	fn remove_relayer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `242`
		//  Estimated: `3502`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3502))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: XRPLBridge DoorTxFee (r:0 w:1)
	/// Proof: XRPLBridge DoorTxFee (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn set_door_tx_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: XRPLBridge DoorAddress (r:0 w:1)
	/// Proof: XRPLBridge DoorAddress (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn set_door_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: XRPLBridge Relayer (r:1 w:0)
	/// Proof: XRPLBridge Relayer (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: XRPLBridge DoorTicketSequence (r:1 w:0)
	/// Proof: XRPLBridge DoorTicketSequence (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: XRPLBridge DoorTicketSequenceParams (r:1 w:0)
	/// Proof: XRPLBridge DoorTicketSequenceParams (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: XRPLBridge DoorTicketSequenceParamsNext (r:0 w:1)
	/// Proof: XRPLBridge DoorTicketSequenceParamsNext (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn set_ticket_sequence_next_allocation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `242`
		//  Estimated: `6484`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6484))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: XRPLBridge DoorTicketSequence (r:1 w:1)
	/// Proof: XRPLBridge DoorTicketSequence (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: XRPLBridge DoorTicketSequenceParams (r:1 w:1)
	/// Proof: XRPLBridge DoorTicketSequenceParams (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: XRPLBridge TicketSequenceThresholdReachedEmitted (r:0 w:1)
	/// Proof: XRPLBridge TicketSequenceThresholdReachedEmitted (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn set_ticket_sequence_current_allocation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `207`
		//  Estimated: `2982`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 0)
			.saturating_add(Weight::from_parts(0, 2982))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
