
//! Autogenerated weights for `pallet_sylo_action_permissions`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-06-08, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Johns-Macbook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-sylo-action-permissions
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./runtime/src/weights/pallet_sylo_action_permissions.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_sylo_action_permissions`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_sylo_action_permissions::WeightInfo for WeightInfo<T> {
	/// Storage: `SyloActionPermissions::DispatchPermissions` (r:1 w:1)
	/// Proof: `SyloActionPermissions::DispatchPermissions` (`max_values`: None, `max_size`: Some(1004101), added: 1006576, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 1000]`.
	fn grant_dispatch_permission(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `1007566`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(8_780_040, 0)
			.saturating_add(Weight::from_parts(0, 1007566))
			// Standard Error: 1_809
			.saturating_add(Weight::from_parts(1_026_567, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `SyloActionPermissions::DispatchPermissions` (r:1 w:1)
	/// Proof: `SyloActionPermissions::DispatchPermissions` (`max_values`: None, `max_size`: Some(1004101), added: 1006576, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 1000]`.
	fn update_dispatch_permission(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `164`
		//  Estimated: `1007566`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(15_701_291, 0)
			.saturating_add(Weight::from_parts(0, 1007566))
			// Standard Error: 1_728
			.saturating_add(Weight::from_parts(733_873, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `SyloActionPermissions::DispatchPermissions` (r:1 w:1)
	/// Proof: `SyloActionPermissions::DispatchPermissions` (`max_values`: None, `max_size`: Some(1004101), added: 1006576, mode: `MaxEncodedLen`)
	fn revoke_dispatch_permission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `148`
		//  Estimated: `1007566`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1007566))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `SyloActionPermissions::DispatchPermissions` (r:1 w:0)
	/// Proof: `SyloActionPermissions::DispatchPermissions` (`max_values`: None, `max_size`: Some(1004101), added: 1006576, mode: `MaxEncodedLen`)
	/// Storage: `MaintenanceMode::BlockedCalls` (r:1 w:0)
	/// Proof: `MaintenanceMode::BlockedCalls` (`max_values`: None, `max_size`: Some(111), added: 2586, mode: `MaxEncodedLen`)
	/// Storage: `MaintenanceMode::BlockedPallets` (r:1 w:0)
	/// Proof: `MaintenanceMode::BlockedPallets` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	fn transact() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `190`
		//  Estimated: `1007566`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(24_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1007566))
			.saturating_add(T::DbWeight::get().reads(3))
	}
}
