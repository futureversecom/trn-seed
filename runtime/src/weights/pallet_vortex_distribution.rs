
//! Autogenerated weights for `pallet_vortex_distribution`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-04-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-102-147`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-vortex-distribution
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./runtime/src/weights/pallet_vortex_distribution.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_vortex_distribution`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_vortex_distribution::WeightInfo for WeightInfo<T> {
	/// Storage: `VortexDistribution::AdminAccount` (r:1 w:1)
	/// Proof: `VortexDistribution::AdminAccount` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	fn set_admin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `1505`
		// Minimum execution time: 29_869_000 picoseconds.
		Weight::from_parts(30_244_000, 0)
			.saturating_add(Weight::from_parts(0, 1505))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VortexDistribution::NextVortexId` (r:1 w:1)
	/// Proof: `VortexDistribution::NextVortexId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:0 w:1)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	fn create_vtx_dist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `1489`
		// Minimum execution time: 38_651_000 picoseconds.
		Weight::from_parts(40_868_000, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:1 w:1)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	fn disable_vtx_dist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202`
		//  Estimated: `3478`
		// Minimum execution time: 40_201_000 picoseconds.
		Weight::from_parts(40_999_000, 0)
			.saturating_add(Weight::from_parts(0, 3478))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VortexDistribution::VtxTotalSupply` (r:0 w:1)
	/// Proof: `VortexDistribution::VtxTotalSupply` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	fn set_vtx_total_supply() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 25_677_000 picoseconds.
		Weight::from_parts(26_149_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VortexDistribution::ConsiderCurrentBalance` (r:0 w:1)
	/// Proof: `VortexDistribution::ConsiderCurrentBalance` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_consider_current_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 23_256_000 picoseconds.
		Weight::from_parts(23_755_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VortexDistribution::DisableRedeem` (r:0 w:1)
	/// Proof: `VortexDistribution::DisableRedeem` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_disable_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 23_355_000 picoseconds.
		Weight::from_parts(23_999_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:1 w:1)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalVortex` (r:1 w:0)
	/// Proof: `VortexDistribution::TotalVortex` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn start_vtx_dist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1122`
		//  Estimated: `3627`
		// Minimum execution time: 117_740_000 picoseconds.
		Weight::from_parts(119_251_000, 0)
			.saturating_add(Weight::from_parts(0, 3627))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `VortexDistribution::FeePotAssetsList` (r:0 w:1)
	/// Proof: `VortexDistribution::FeePotAssetsList` (`max_values`: None, `max_size`: Some(10014), added: 12489, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 500]`.
	fn set_fee_pot_asset_balances(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 30_235_000 picoseconds.
		Weight::from_parts(34_203_738, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1_207
			.saturating_add(Weight::from_parts(60_324, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VortexDistribution::VtxVaultAssetsList` (r:0 w:1)
	/// Proof: `VortexDistribution::VtxVaultAssetsList` (`max_values`: None, `max_size`: Some(10014), added: 12489, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 500]`.
	fn set_vtx_vault_asset_balances(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 30_654_000 picoseconds.
		Weight::from_parts(35_358_686, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1_257
			.saturating_add(Weight::from_parts(59_684, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VortexDistribution::FeePotAssetsList` (r:1 w:0)
	/// Proof: `VortexDistribution::FeePotAssetsList` (`max_values`: None, `max_size`: Some(10014), added: 12489, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::AssetPrices` (r:0 w:500)
	/// Proof: `VortexDistribution::AssetPrices` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 500]`.
	fn set_asset_prices(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `242 + b * (20 ±0)`
		//  Estimated: `13479`
		// Minimum execution time: 51_520_000 picoseconds.
		Weight::from_parts(52_231_000, 0)
			.saturating_add(Weight::from_parts(0, 13479))
			// Standard Error: 74_186
			.saturating_add(Weight::from_parts(12_942_172, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
	}
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:1 w:0)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalRewardPoints` (r:1 w:1)
	/// Proof: `VortexDistribution::TotalRewardPoints` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::RewardPoints` (r:500 w:500)
	/// Proof: `VortexDistribution::RewardPoints` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 500]`.
	fn register_reward_points(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202`
		//  Estimated: `3493 + b * (2547 ±0)`
		// Minimum execution time: 50_040_000 picoseconds.
		Weight::from_parts(36_636_559, 0)
			.saturating_add(Weight::from_parts(0, 3493))
			// Standard Error: 5_595
			.saturating_add(Weight::from_parts(8_058_068, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2547).saturating_mul(b.into()))
	}
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:1 w:0)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalWorkPoints` (r:1 w:1)
	/// Proof: `VortexDistribution::TotalWorkPoints` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::WorkPoints` (r:500 w:500)
	/// Proof: `VortexDistribution::WorkPoints` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 500]`.
	fn register_work_points(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202`
		//  Estimated: `3493 + b * (2547 ±0)`
		// Minimum execution time: 49_934_000 picoseconds.
		Weight::from_parts(22_627_359, 0)
			.saturating_add(Weight::from_parts(0, 3493))
			// Standard Error: 9_245
			.saturating_add(Weight::from_parts(8_105_134, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 2547).saturating_mul(b.into()))
	}
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:1 w:1)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::VtxVaultAssetsList` (r:1 w:0)
	/// Proof: `VortexDistribution::VtxVaultAssetsList` (`max_values`: None, `max_size`: Some(10014), added: 12489, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::AssetPrices` (r:2 w:0)
	/// Proof: `VortexDistribution::AssetPrices` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::ConsiderCurrentBalance` (r:1 w:0)
	/// Proof: `VortexDistribution::ConsiderCurrentBalance` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::VtxTotalSupply` (r:1 w:0)
	/// Proof: `VortexDistribution::VtxTotalSupply` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::FeePotAssetsList` (r:1 w:0)
	/// Proof: `VortexDistribution::FeePotAssetsList` (`max_values`: None, `max_size`: Some(10014), added: 12489, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:3 w:3)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::EnableManualRewardInput` (r:1 w:0)
	/// Proof: `VortexDistribution::EnableManualRewardInput` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalVortex` (r:0 w:1)
	/// Proof: `VortexDistribution::TotalVortex` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalNetworkReward` (r:0 w:1)
	/// Proof: `VortexDistribution::TotalNetworkReward` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalBootstrapReward` (r:0 w:1)
	/// Proof: `VortexDistribution::TotalBootstrapReward` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::VtxPrice` (r:0 w:1)
	/// Proof: `VortexDistribution::VtxPrice` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	fn trigger_vtx_distribution() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1640`
		//  Estimated: `13479`
		// Minimum execution time: 432_112_000 picoseconds.
		Weight::from_parts(437_536_000, 0)
			.saturating_add(Weight::from_parts(0, 13479))
			.saturating_add(T::DbWeight::get().reads(14))
			.saturating_add(T::DbWeight::get().writes(11))
	}
	/// Storage: `VortexDistribution::DisableRedeem` (r:1 w:0)
	/// Proof: `VortexDistribution::DisableRedeem` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::VtxVaultRedeemAssetList` (r:1 w:0)
	/// Proof: `VortexDistribution::VtxVaultRedeemAssetList` (`max_values`: Some(1), `max_size`: Some(2002), added: 2497, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn redeem_tokens_from_vault() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1214`
		//  Estimated: `3627`
		// Minimum execution time: 148_856_000 picoseconds.
		Weight::from_parts(150_868_000, 0)
			.saturating_add(Weight::from_parts(0, 3627))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:1 w:0)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::VtxDistPayoutPivot` (r:1 w:1)
	/// Proof: `VortexDistribution::VtxDistPayoutPivot` (`max_values`: None, `max_size`: Some(1014), added: 3489, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::VtxDistOrderbook` (r:2 w:1)
	/// Proof: `VortexDistribution::VtxDistOrderbook` (`max_values`: Some(4294967295), `max_size`: Some(73), added: 4033, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::NextUnsignedAt` (r:0 w:1)
	/// Proof: `VortexDistribution::NextUnsignedAt` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn pay_unsigned() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1504`
		//  Estimated: `9056`
		// Minimum execution time: 222_785_000 picoseconds.
		Weight::from_parts(224_490_000, 0)
			.saturating_add(Weight::from_parts(0, 9056))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: `VortexDistribution::VtxVaultRedeemAssetList` (r:0 w:1)
	/// Proof: `VortexDistribution::VtxVaultRedeemAssetList` (`max_values`: Some(1), `max_size`: Some(2002), added: 2497, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 500]`.
	fn set_vtx_vault_redeem_asset_list(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 24_846_000 picoseconds.
		Weight::from_parts(26_694_725, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 115
			.saturating_add(Weight::from_parts(10_373, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VortexDistribution::EnableManualRewardInput` (r:1 w:0)
	/// Proof: `VortexDistribution::EnableManualRewardInput` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:1 w:0)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalVortex` (r:1 w:1)
	/// Proof: `VortexDistribution::TotalVortex` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::VtxDistOrderbook` (r:500 w:500)
	/// Proof: `VortexDistribution::VtxDistOrderbook` (`max_values`: Some(4294967295), `max_size`: Some(73), added: 4033, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 500]`.
	fn register_rewards(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `224`
		//  Estimated: `3493 + b * (4033 ±0)`
		// Minimum execution time: 58_266_000 picoseconds.
		Weight::from_parts(37_128_794, 0)
			.saturating_add(Weight::from_parts(0, 3493))
			// Standard Error: 6_708
			.saturating_add(Weight::from_parts(8_221_264, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 4033).saturating_mul(b.into()))
	}
	/// Storage: `VortexDistribution::EnableManualRewardInput` (r:0 w:1)
	/// Proof: `VortexDistribution::EnableManualRewardInput` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_enable_manual_reward_input() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 23_792_000 picoseconds.
		Weight::from_parts(24_338_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
