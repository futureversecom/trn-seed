
//! Autogenerated weights for `pallet_vortex_distribution`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-02-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Surangas-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-vortex-distribution
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./runtime/src/weights/pallet_vortex_distribution.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_vortex_distribution`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_vortex_distribution::WeightInfo for WeightInfo<T> {
	/// Storage: `VortexDistribution::AdminAccount` (r:0 w:1)
	/// Proof: `VortexDistribution::AdminAccount` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	fn set_admin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VortexDistribution::NextVortexId` (r:1 w:1)
	/// Proof: `VortexDistribution::NextVortexId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:0 w:1)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	fn create_vtx_dist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `1489`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:1 w:1)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	fn disable_vtx_dist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202`
		//  Estimated: `3478`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3478))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:1 w:1)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalVortex` (r:1 w:1)
	/// Proof: `VortexDistribution::TotalVortex` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn start_vtx_dist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1088`
		//  Estimated: `3627`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(48_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3627))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `VortexDistribution::VtxDistEras` (r:0 w:1)
	/// Proof: `VortexDistribution::VtxDistEras` (`max_values`: None, `max_size`: Some(20), added: 2495, mode: `MaxEncodedLen`)
	fn set_vtx_dist_eras() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VortexDistribution::AssetsList` (r:0 w:1)
	/// Proof: `VortexDistribution::AssetsList` (`max_values`: None, `max_size`: Some(2014), added: 4489, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 500]`.
	fn set_assets_list(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_602_347, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1_083
			.saturating_add(Weight::from_parts(26_604, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `VortexDistribution::AssetsList` (r:1 w:0)
	/// Proof: `VortexDistribution::AssetsList` (`max_values`: None, `max_size`: Some(2014), added: 4489, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::RootAssetPrice` (r:0 w:1)
	/// Proof: `VortexDistribution::RootAssetPrice` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::AssetPrices` (r:0 w:500)
	/// Proof: `VortexDistribution::AssetPrices` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 500]`.
	fn set_asset_prices(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `239 + b * (4 Â±0)`
		//  Estimated: `5479`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(16_000_000, 0)
			.saturating_add(Weight::from_parts(0, 5479))
			// Standard Error: 8_716
			.saturating_add(Weight::from_parts(3_633_515, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
	}
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:1 w:0)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::VtxDistOrderbook` (r:1 w:1)
	/// Proof: `VortexDistribution::VtxDistOrderbook` (`max_values`: Some(4294967295), `max_size`: Some(73), added: 4033, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalVortex` (r:1 w:1)
	/// Proof: `VortexDistribution::TotalVortex` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	fn register_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202`
		//  Estimated: `5023`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_000_000, 0)
			.saturating_add(Weight::from_parts(0, 5023))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:1 w:0)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::EffectiveBalancesWorkPoints` (r:2 w:1)
	/// Proof: `VortexDistribution::EffectiveBalancesWorkPoints` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalEffectiveBalanceEra` (r:1 w:1)
	/// Proof: `VortexDistribution::TotalEffectiveBalanceEra` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalWorkPointsEra` (r:1 w:1)
	/// Proof: `VortexDistribution::TotalWorkPointsEra` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::AccountTotalEffectiveBalance` (r:1 w:1)
	/// Proof: `VortexDistribution::AccountTotalEffectiveBalance` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::AccountTotalWorkPoints` (r:1 w:1)
	/// Proof: `VortexDistribution::AccountTotalWorkPoints` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::PenaltyEffectiveBalancesWorkPoints` (r:1 w:0)
	/// Proof: `VortexDistribution::PenaltyEffectiveBalancesWorkPoints` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	fn register_eff_bal_n_wk_pts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `338`
		//  Estimated: `6188`
		// Minimum execution time: 39_000_000 picoseconds.
		Weight::from_parts(41_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6188))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:1 w:1)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::RootAssetPrice` (r:1 w:0)
	/// Proof: `VortexDistribution::RootAssetPrice` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::AssetsList` (r:1 w:0)
	/// Proof: `VortexDistribution::AssetsList` (`max_values`: None, `max_size`: Some(2014), added: 4489, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::AssetPrices` (r:1 w:0)
	/// Proof: `VortexDistribution::AssetPrices` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:2 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:3 w:3)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::VtxDistEras` (r:1 w:0)
	/// Proof: `VortexDistribution::VtxDistEras` (`max_values`: None, `max_size`: Some(20), added: 2495, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalEffectiveBalanceEra` (r:1 w:0)
	/// Proof: `VortexDistribution::TotalEffectiveBalanceEra` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalWorkPointsEra` (r:1 w:0)
	/// Proof: `VortexDistribution::TotalWorkPointsEra` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::EffectiveBalancesWorkPoints` (r:1 w:0)
	/// Proof: `VortexDistribution::EffectiveBalancesWorkPoints` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalVortex` (r:0 w:1)
	/// Proof: `VortexDistribution::TotalVortex` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalNetworkReward` (r:0 w:1)
	/// Proof: `VortexDistribution::TotalNetworkReward` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::TotalBootstrapReward` (r:0 w:1)
	/// Proof: `VortexDistribution::TotalBootstrapReward` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	fn trigger_vtx_distribution() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1480`
		//  Estimated: `8763`
		// Minimum execution time: 138_000_000 picoseconds.
		Weight::from_parts(141_000_000, 0)
			.saturating_add(Weight::from_parts(0, 8763))
			.saturating_add(T::DbWeight::get().reads(15))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:1 w:0)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::AssetsList` (r:1 w:0)
	/// Proof: `VortexDistribution::AssetsList` (`max_values`: None, `max_size`: Some(2014), added: 4489, mode: `MaxEncodedLen`)
	fn redeem_tokens_from_vault() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1206`
		//  Estimated: `6160`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(50_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6160))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `VortexDistribution::VtxDistStatuses` (r:1 w:0)
	/// Proof: `VortexDistribution::VtxDistStatuses` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::VtxDistPayoutPivot` (r:1 w:1)
	/// Proof: `VortexDistribution::VtxDistPayoutPivot` (`max_values`: None, `max_size`: Some(1014), added: 3489, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::VtxDistOrderbook` (r:2 w:1)
	/// Proof: `VortexDistribution::VtxDistOrderbook` (`max_values`: Some(4294967295), `max_size`: Some(73), added: 4033, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `VortexDistribution::NextUnsignedAt` (r:0 w:1)
	/// Proof: `VortexDistribution::NextUnsignedAt` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn pay_unsigned() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1376`
		//  Estimated: `9056`
		// Minimum execution time: 81_000_000 picoseconds.
		Weight::from_parts(82_000_000, 0)
			.saturating_add(Weight::from_parts(0, 9056))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(8))
	}
}
