
//! Autogenerated weights for `pallet_dex`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Xiankuns-MBP-2`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_dex
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output/pallet_dex.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_dex`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_dex::WeightInfo for WeightInfo<T> {
	/// Storage: Dex TradingPairStatuses (r:1 w:0)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
	/// Storage: Dex LiquidityPool (r:1 w:1)
	/// Proof: Dex LiquidityPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:2 w:2)
	/// Proof: Assets Asset (max_values: None, max_size: Some(162), added: 2637, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:4 w:4)
	/// Proof: Assets Account (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	fn swap_with_exact_supply() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1134`
		//  Estimated: `24509`
		// Minimum execution time: 91_000_000 picoseconds.
		Weight::from_parts(98_000_000, 0)
			.saturating_add(Weight::from_parts(0, 24509))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: Dex TradingPairStatuses (r:1 w:0)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
	/// Storage: Dex LiquidityPool (r:1 w:1)
	/// Proof: Dex LiquidityPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:2 w:2)
	/// Proof: Assets Asset (max_values: None, max_size: Some(162), added: 2637, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:4 w:4)
	/// Proof: Assets Account (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	fn swap_with_exact_target() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1134`
		//  Estimated: `24509`
		// Minimum execution time: 91_000_000 picoseconds.
		Weight::from_parts(92_000_000, 0)
			.saturating_add(Weight::from_parts(0, 24509))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: Dex TradingPairLPToken (r:1 w:1)
	/// Proof: Dex TradingPairLPToken (max_values: None, max_size: Some(21), added: 2496, mode: MaxEncodedLen)
	/// Storage: Assets Metadata (r:3 w:1)
	/// Proof: Assets Metadata (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	/// Storage: AssetsExt NextAssetId (r:1 w:1)
	/// Proof: AssetsExt NextAssetId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:3 w:3)
	/// Proof: Assets Asset (max_values: None, max_size: Some(162), added: 2637, mode: MaxEncodedLen)
	/// Storage: EVM AccountCodes (r:1 w:1)
	/// Proof Skipped: EVM AccountCodes (max_values: None, max_size: None, mode: Measured)
	/// Storage: Futurepass DefaultProxy (r:1 w:0)
	/// Proof: Futurepass DefaultProxy (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:4 w:4)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: Dex LiquidityPool (r:1 w:1)
	/// Proof: Dex LiquidityPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:6 w:6)
	/// Proof: Assets Account (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: Dex TradingPairStatuses (r:0 w:1)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
	fn add_liquidity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1370`
		//  Estimated: `62306`
		// Minimum execution time: 180_000_000 picoseconds.
		Weight::from_parts(186_000_000, 0)
			.saturating_add(Weight::from_parts(0, 62306))
			.saturating_add(T::DbWeight::get().reads(21))
			.saturating_add(T::DbWeight::get().writes(19))
	}
	/// Storage: Dex TradingPairLPToken (r:1 w:0)
	/// Proof: Dex TradingPairLPToken (max_values: None, max_size: Some(21), added: 2496, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:3 w:3)
	/// Proof: Assets Asset (max_values: None, max_size: Some(162), added: 2637, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:6 w:6)
	/// Proof: Assets Account (max_values: None, max_size: Some(90), added: 2565, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: Dex LiquidityPool (r:1 w:1)
	/// Proof: Dex LiquidityPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn remove_liquidity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1556`
		//  Estimated: `35861`
		// Minimum execution time: 146_000_000 picoseconds.
		Weight::from_parts(147_000_000, 0)
			.saturating_add(Weight::from_parts(0, 35861))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(11))
	}
	/// Storage: Dex TradingPairLPToken (r:1 w:0)
	/// Proof: Dex TradingPairLPToken (max_values: None, max_size: Some(21), added: 2496, mode: MaxEncodedLen)
	/// Storage: Dex TradingPairStatuses (r:1 w:1)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
	fn reenable_trading_pair() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260`
		//  Estimated: `6968`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6968))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Dex TradingPairLPToken (r:1 w:0)
	/// Proof: Dex TradingPairLPToken (max_values: None, max_size: Some(21), added: 2496, mode: MaxEncodedLen)
	/// Storage: Dex TradingPairStatuses (r:1 w:1)
	/// Proof: Dex TradingPairStatuses (max_values: None, max_size: Some(17), added: 2492, mode: MaxEncodedLen)
	fn disable_trading_pair() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260`
		//  Estimated: `6968`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6968))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
