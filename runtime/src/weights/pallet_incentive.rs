
//! Autogenerated weights for `pallet_incentive`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-06, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Dev-MBP-2`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-incentive
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./runtime/src/weights/pallet_incentive.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_incentive`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_incentive::WeightInfo for WeightInfo<T> {
	// Storage: Incentive NextPoolId (r:1 w:1)
	// Storage: Incentive Pools (r:0 w:1)
	fn create_pool() -> Weight {
		Weight::from_ref_time(16_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Incentive Pools (r:1 w:1)
	// Storage: Incentive RolloverPivot (r:0 w:1)
	// Storage: Incentive PoolRelationships (r:0 w:1)
	fn close_pool() -> Weight {
		Weight::from_ref_time(17_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Incentive Pools (r:2 w:0)
	// Storage: Incentive PoolRelationships (r:0 w:1)
	fn set_incentive_pool_succession() -> Weight {
		Weight::from_ref_time(17_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Incentive Pools (r:1 w:0)
	// Storage: Incentive PoolUsers (r:1 w:1)
	fn set_pool_rollover() -> Weight {
		Weight::from_ref_time(21_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Incentive Pools (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: Incentive PoolUsers (r:1 w:1)
	fn join_pool() -> Weight {
		Weight::from_ref_time(55_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Incentive Pools (r:1 w:1)
	// Storage: Incentive PoolUsers (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn exit_pool() -> Weight {
		Weight::from_ref_time(55_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Incentive PoolUsers (r:1 w:1)
	// Storage: Incentive Pools (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	fn claim_reward() -> Weight {
		Weight::from_ref_time(49_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Incentive Pools (r:2 w:2)
	// Storage: Incentive PoolRelationships (r:1 w:0)
	// Storage: Incentive RolloverPivot (r:1 w:1)
	// Storage: Incentive PoolUsers (r:2 w:2)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: Incentive NextRolloverUnsignedAt (r:0 w:1)
	fn rollover_unsigned() -> Weight {
		Weight::from_ref_time(78_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
	}
}
