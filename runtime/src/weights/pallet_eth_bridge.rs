
//! Autogenerated weights for `pallet_eth_bridge`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Surangas-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_eth_bridge
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_eth_bridge`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_eth_bridge::WeightInfo for WeightInfo<T> {
	// Storage: EthBridge RelayerBond (r:1 w:0)
	// Storage: EthBridge Relayer (r:0 w:1)
	fn set_relayer() -> Weight {
		(17_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: EthBridge RelayerBond (r:1 w:1)
	// Storage: AssetsExt Holds (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:2 w:2)
	fn deposit_relayer_bond() -> Weight {
		(51_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: EthBridge Relayer (r:1 w:0)
	// Storage: EthBridge RelayerBond (r:1 w:1)
	// Storage: AssetsExt Holds (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:2 w:2)
	fn withdraw_relayer_bond() -> Weight {
		(56_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: EthBridge EventBlockConfirmations (r:0 w:1)
	fn set_event_block_confirmations() -> Weight {
		(11_000_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: EthBridge ChallengePeriod (r:0 w:1)
	fn set_challenge_period() -> Weight {
		(10_000_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: EthBridge ContractAddress (r:0 w:1)
	fn set_contract_address() -> Weight {
		(10_000_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: EthBridge Relayer (r:1 w:0)
	// Storage: EthBridge PendingEventClaims (r:1 w:1)
	// Storage: EthBridge ProcessedMessageIds (r:1 w:0)
	// Storage: EthBridge ChallengePeriod (r:1 w:0)
	// Storage: EthBridge MessagesValidAt (r:1 w:1)
	// Storage: EthBridge PendingClaimStatus (r:0 w:1)
	fn submit_event() -> Weight {
		(24_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: EthBridge PendingEventClaims (r:1 w:0)
	// Storage: EthBridge PendingClaimStatus (r:1 w:1)
	// Storage: AssetsExt Holds (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:2 w:2)
	// Storage: EthBridge PendingClaimChallenges (r:1 w:1)
	// Storage: EthBridge ChallengerAccount (r:0 w:1)
	fn submit_challenge() -> Weight {
		(59_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
}
