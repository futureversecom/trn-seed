
//! Autogenerated weights for `pallet_nft`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-07-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-102-147`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-nft
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./runtime/src/weights/pallet_nft.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_nft`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_nft::WeightInfo for WeightInfo<T> {
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:1)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	fn claim_unowned_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `592`
		//  Estimated: `3959`
		// Minimum execution time: 46_269_000 picoseconds.
		Weight::from_parts(47_354_000, 0)
			.saturating_add(Weight::from_parts(0, 3959))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:1)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	fn set_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `592`
		//  Estimated: `3959`
		// Minimum execution time: 49_555_000 picoseconds.
		Weight::from_parts(50_821_000, 0)
			.saturating_add(Weight::from_parts(0, 3959))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:1)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	fn set_max_issuance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `592`
		//  Estimated: `3959`
		// Minimum execution time: 48_279_000 picoseconds.
		Weight::from_parts(49_443_000, 0)
			.saturating_add(Weight::from_parts(0, 3959))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:1)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	fn set_base_uri() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `592`
		//  Estimated: `3959`
		// Minimum execution time: 50_370_000 picoseconds.
		Weight::from_parts(51_531_000, 0)
			.saturating_add(Weight::from_parts(0, 3959))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:1)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	fn set_name() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `592`
		//  Estimated: `3959`
		// Minimum execution time: 50_338_000 picoseconds.
		Weight::from_parts(51_099_000, 0)
			.saturating_add(Weight::from_parts(0, 3959))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:1)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	fn set_royalties_schedule() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `592`
		//  Estimated: `3959`
		// Minimum execution time: 50_379_000 picoseconds.
		Weight::from_parts(50_955_000, 0)
			.saturating_add(Weight::from_parts(0, 3959))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::NextCollectionId` (r:1 w:1)
	/// Proof: `Nft::NextCollectionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Nft::OwnedTokens` (r:1 w:1)
	/// Proof: `Nft::OwnedTokens` (`max_values`: None, `max_size`: Some(4000052), added: 4002527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:1 w:1)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Futurepass::DefaultProxy` (r:1 w:0)
	/// Proof: `Futurepass::DefaultProxy` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodesMetadata` (r:0 w:1)
	/// Proof: `EVM::AccountCodesMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::TokenInfo` (r:0 w:500)
	/// Proof: `Nft::TokenInfo` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionInfo` (r:0 w:1)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 500]`.
	fn create_collection(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `4003517`
		// Minimum execution time: 113_588_000 picoseconds.
		Weight::from_parts(99_995_933, 0)
			.saturating_add(Weight::from_parts(0, 4003517))
			// Standard Error: 5_926
			.saturating_add(Weight::from_parts(3_903_662, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:0)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PublicMintInfo` (r:1 w:1)
	/// Proof: `Nft::PublicMintInfo` (`max_values`: None, `max_size`: Some(34), added: 2509, mode: `MaxEncodedLen`)
	fn toggle_public_mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `592`
		//  Estimated: `3959`
		// Minimum execution time: 52_759_000 picoseconds.
		Weight::from_parts(54_150_000, 0)
			.saturating_add(Weight::from_parts(0, 3959))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:0)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PublicMintInfo` (r:1 w:1)
	/// Proof: `Nft::PublicMintInfo` (`max_values`: None, `max_size`: Some(34), added: 2509, mode: `MaxEncodedLen`)
	fn set_mint_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `592`
		//  Estimated: `3959`
		// Minimum execution time: 53_148_000 picoseconds.
		Weight::from_parts(54_130_000, 0)
			.saturating_add(Weight::from_parts(0, 3959))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:1)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PublicMintInfo` (r:1 w:0)
	/// Proof: `Nft::PublicMintInfo` (`max_values`: None, `max_size`: Some(34), added: 2509, mode: `MaxEncodedLen`)
	/// Storage: `Nft::UtilityFlags` (r:1 w:0)
	/// Proof: `Nft::UtilityFlags` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Nft::OwnedTokens` (r:1 w:1)
	/// Proof: `Nft::OwnedTokens` (`max_values`: None, `max_size`: Some(4000052), added: 4002527, mode: `MaxEncodedLen`)
	/// Storage: `EVMChainId::ChainId` (r:1 w:0)
	/// Proof: `EVMChainId::ChainId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Nfi::NfiEnabled` (r:1 w:0)
	/// Proof: `Nfi::NfiEnabled` (`max_values`: None, `max_size`: Some(529), added: 3004, mode: `MaxEncodedLen`)
	/// Storage: `Nft::TokenInfo` (r:0 w:500)
	/// Proof: `Nft::TokenInfo` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 500]`.
	fn mint(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `901`
		//  Estimated: `4003517`
		// Minimum execution time: 205_305_000 picoseconds.
		Weight::from_parts(191_182_594, 0)
			.saturating_add(Weight::from_parts(0, 4003517))
			// Standard Error: 5_569
			.saturating_add(Weight::from_parts(3_850_850, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::UtilityFlags` (r:1 w:0)
	/// Proof: `Nft::UtilityFlags` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:0)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	/// Storage: `Nft::TokenInfo` (r:500 w:500)
	/// Proof: `Nft::TokenInfo` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Nft::OwnedTokens` (r:2 w:2)
	/// Proof: `Nft::OwnedTokens` (`max_values`: None, `max_size`: Some(4000052), added: 4002527, mode: `MaxEncodedLen`)
	/// Storage: `TokenApprovals::ERC721Approvals` (r:0 w:500)
	/// Proof: `TokenApprovals::ERC721Approvals` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 500]`.
	fn transfer(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `394 + p * (43 ±0)`
		//  Estimated: `8006044 + p * (2540 ±0)`
		// Minimum execution time: 87_397_000 picoseconds.
		Weight::from_parts(88_210_000, 0)
			.saturating_add(Weight::from_parts(0, 8006044))
			// Standard Error: 21_932
			.saturating_add(Weight::from_parts(12_121_549, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(p.into()))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::UtilityFlags` (r:1 w:0)
	/// Proof: `Nft::UtilityFlags` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:1)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	/// Storage: `Nft::TokenInfo` (r:1 w:1)
	/// Proof: `Nft::TokenInfo` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Nft::OwnedTokens` (r:1 w:1)
	/// Proof: `Nft::OwnedTokens` (`max_values`: None, `max_size`: Some(4000052), added: 4002527, mode: `MaxEncodedLen`)
	/// Storage: `EVMChainId::ChainId` (r:1 w:0)
	/// Proof: `EVMChainId::ChainId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Nfi::NfiData` (r:1 w:0)
	/// Proof: `Nfi::NfiData` (`max_values`: None, `max_size`: Some(1166), added: 3641, mode: `MaxEncodedLen`)
	/// Storage: `TokenApprovals::ERC721Approvals` (r:0 w:1)
	/// Proof: `TokenApprovals::ERC721Approvals` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	fn burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `716`
		//  Estimated: `4003517`
		// Minimum execution time: 97_934_000 picoseconds.
		Weight::from_parts(100_193_000, 0)
			.saturating_add(Weight::from_parts(0, 4003517))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:0)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	/// Storage: `Nft::UtilityFlags` (r:0 w:1)
	/// Proof: `Nft::UtilityFlags` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	fn set_utility_flags() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `592`
		//  Estimated: `3959`
		// Minimum execution time: 56_208_000 picoseconds.
		Weight::from_parts(57_063_000, 0)
			.saturating_add(Weight::from_parts(0, 3959))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:0)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	/// Storage: `Nft::TokenInfo` (r:1 w:1)
	/// Proof: `Nft::TokenInfo` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	fn set_token_transferable_flag() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `628`
		//  Estimated: `3959`
		// Minimum execution time: 59_321_000 picoseconds.
		Weight::from_parts(60_811_000, 0)
			.saturating_add(Weight::from_parts(0, 3959))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:0)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	/// Storage: `Nft::UtilityFlags` (r:1 w:0)
	/// Proof: `Nft::UtilityFlags` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PendingIssuances` (r:1 w:1)
	/// Proof: `Nft::PendingIssuances` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn issue_soulbound() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `592`
		//  Estimated: `3959`
		// Minimum execution time: 61_832_000 picoseconds.
		Weight::from_parts(63_130_000, 0)
			.saturating_add(Weight::from_parts(0, 3959))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::PendingIssuances` (r:1 w:1)
	/// Proof: `Nft::PendingIssuances` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:1)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	/// Storage: `Nft::UtilityFlags` (r:1 w:0)
	/// Proof: `Nft::UtilityFlags` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Nft::OwnedTokens` (r:1 w:1)
	/// Proof: `Nft::OwnedTokens` (`max_values`: None, `max_size`: Some(4000052), added: 4002527, mode: `MaxEncodedLen`)
	/// Storage: `EVMChainId::ChainId` (r:1 w:0)
	/// Proof: `EVMChainId::ChainId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Nfi::NfiEnabled` (r:1 w:0)
	/// Proof: `Nfi::NfiEnabled` (`max_values`: None, `max_size`: Some(529), added: 3004, mode: `MaxEncodedLen`)
	/// Storage: `Nft::TokenInfo` (r:0 w:1)
	/// Proof: `Nft::TokenInfo` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	fn accept_soulbound_issuance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `749`
		//  Estimated: `4003517`
		// Minimum execution time: 106_615_000 picoseconds.
		Weight::from_parts(108_323_000, 0)
			.saturating_add(Weight::from_parts(0, 4003517))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:0)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	/// Storage: `Nft::TokenInfo` (r:1 w:0)
	/// Proof: `Nft::TokenInfo` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Nft::AdditionalTokenData` (r:0 w:1)
	/// Proof: `Nft::AdditionalTokenData` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	fn set_additional_data() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `628`
		//  Estimated: `3959`
		// Minimum execution time: 61_748_000 picoseconds.
		Weight::from_parts(62_780_000, 0)
			.saturating_add(Weight::from_parts(0, 3959))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Migration::Status` (r:1 w:0)
	/// Proof: `Migration::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:1)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(494), added: 2969, mode: `MaxEncodedLen`)
	/// Storage: `Nft::UtilityFlags` (r:1 w:0)
	/// Proof: `Nft::UtilityFlags` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Nft::OwnedTokens` (r:1 w:1)
	/// Proof: `Nft::OwnedTokens` (`max_values`: None, `max_size`: Some(4000052), added: 4002527, mode: `MaxEncodedLen`)
	/// Storage: `EVMChainId::ChainId` (r:1 w:0)
	/// Proof: `EVMChainId::ChainId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Nfi::NfiEnabled` (r:1 w:0)
	/// Proof: `Nfi::NfiEnabled` (`max_values`: None, `max_size`: Some(529), added: 3004, mode: `MaxEncodedLen`)
	/// Storage: `Nft::TokenInfo` (r:0 w:1)
	/// Proof: `Nft::TokenInfo` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `Nft::AdditionalTokenData` (r:0 w:1)
	/// Proof: `Nft::AdditionalTokenData` (`max_values`: None, `max_size`: Some(118), added: 2593, mode: `MaxEncodedLen`)
	fn mint_with_additional_data() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `680`
		//  Estimated: `4003517`
		// Minimum execution time: 104_060_000 picoseconds.
		Weight::from_parts(105_415_000, 0)
			.saturating_add(Weight::from_parts(0, 4003517))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}
