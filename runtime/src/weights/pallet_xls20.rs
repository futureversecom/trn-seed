
//! Autogenerated weights for `pallet_xls20`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Xiankuns-MBP-2`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_xls20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output/pallet_xls20.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_xls20`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_xls20::WeightInfo for WeightInfo<T> {
	/// Storage: Xls20 Relayer (r:0 w:1)
	/// Proof: Xls20 Relayer (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn set_relayer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Xls20 Xls20MintFee (r:0 w:1)
	/// Proof: Xls20 Xls20MintFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_xls20_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Nft CollectionInfo (r:1 w:1)
	/// Proof Skipped: Nft CollectionInfo (max_values: None, max_size: None, mode: Measured)
	fn enable_xls20_compatibility() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359`
		//  Estimated: `3824`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3824))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Nft CollectionInfo (r:1 w:0)
	/// Proof Skipped: Nft CollectionInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: Xls20 Xls20TokenMap (r:1 w:0)
	/// Proof: Xls20 Xls20TokenMap (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: Xls20 Xls20MintFee (r:1 w:0)
	/// Proof: Xls20 Xls20MintFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn re_request_xls20_mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `426`
		//  Estimated: `8945`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 0)
			.saturating_add(Weight::from_parts(0, 8945))
			.saturating_add(T::DbWeight::get().reads(3))
	}
	/// Storage: Xls20 Relayer (r:1 w:0)
	/// Proof: Xls20 Relayer (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	/// Storage: Nft CollectionInfo (r:1 w:0)
	/// Proof Skipped: Nft CollectionInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: Xls20 Xls20TokenMap (r:1 w:1)
	/// Proof: Xls20 Xls20TokenMap (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	fn fulfill_xls20_mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `432`
		//  Estimated: `8955`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(22_000_000, 0)
			.saturating_add(Weight::from_parts(0, 8955))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
