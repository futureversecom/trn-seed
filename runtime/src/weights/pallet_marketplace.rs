
//! Autogenerated weights for `pallet_marketplace`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-05-23, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-102-147`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-marketplace
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./runtime/src/weights/pallet_marketplace.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_marketplace`.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_marketplace::WeightInfo for WeightInfo<T> {
	/// Storage: `Marketplace::NextMarketplaceId` (r:1 w:1)
	/// Proof: `Marketplace::NextMarketplaceId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::RegisteredMarketplaces` (r:0 w:1)
	/// Proof: `Marketplace::RegisteredMarketplaces` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	fn register_marketplace() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `134`
		//  Estimated: `1489`
		// Minimum execution time: 46_375_000 picoseconds.
		Weight::from_parts(47_430_000, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Nft::CollectionInfo` (r:1 w:0)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::FeeTo` (r:1 w:0)
	/// Proof: `Marketplace::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::NextListingId` (r:1 w:1)
	/// Proof: `Marketplace::NextListingId` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Nft::TokenLocks` (r:50 w:50)
	/// Proof: `Nft::TokenLocks` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::Listings` (r:0 w:1)
	/// Proof: `Marketplace::Listings` (`max_values`: None, `max_size`: Some(20295), added: 22770, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::ListingEndSchedule` (r:0 w:1)
	/// Proof: `Marketplace::ListingEndSchedule` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::OpenCollectionListings` (r:0 w:1)
	/// Proof: `Marketplace::OpenCollectionListings` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 50]`.
	fn sell_nft(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4431`
		//  Estimated: `3464 + p * (2508 ±0)`
		// Minimum execution time: 105_677_000 picoseconds.
		Weight::from_parts(96_602_060, 0)
			.saturating_add(Weight::from_parts(0, 3464))
			// Standard Error: 30_594
			.saturating_add(Weight::from_parts(14_222_955, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 2508).saturating_mul(p.into()))
	}
	/// Storage: `Sft::SftCollectionInfo` (r:1 w:0)
	/// Proof: `Sft::SftCollectionInfo` (`max_values`: None, `max_size`: Some(484), added: 2959, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::FeeTo` (r:1 w:0)
	/// Proof: `Marketplace::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::NextListingId` (r:1 w:1)
	/// Proof: `Marketplace::NextListingId` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Sft::TokenInfo` (r:50 w:50)
	/// Proof: `Sft::TokenInfo` (`max_values`: None, `max_size`: Some(52000104), added: 52002579, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::Listings` (r:0 w:1)
	/// Proof: `Marketplace::Listings` (`max_values`: None, `max_size`: Some(20295), added: 22770, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::ListingEndSchedule` (r:0 w:1)
	/// Proof: `Marketplace::ListingEndSchedule` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::OpenCollectionListings` (r:0 w:1)
	/// Proof: `Marketplace::OpenCollectionListings` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 50]`.
	fn sell_sft(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335 + p * (105 ±0)`
		//  Estimated: `3949 + p * (52002579 ±0)`
		// Minimum execution time: 93_629_000 picoseconds.
		Weight::from_parts(87_884_460, 0)
			.saturating_add(Weight::from_parts(0, 3949))
			// Standard Error: 17_185
			.saturating_add(Weight::from_parts(10_296_683, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 52002579).saturating_mul(p.into()))
	}
	/// Storage: `Marketplace::Listings` (r:1 w:1)
	/// Proof: `Marketplace::Listings` (`max_values`: None, `max_size`: Some(20295), added: 22770, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:0)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:0)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:1)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	/// Storage: `TokenApprovals::ERC721Approvals` (r:0 w:1)
	/// Proof: `TokenApprovals::ERC721Approvals` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::ListingEndSchedule` (r:0 w:1)
	/// Proof: `Marketplace::ListingEndSchedule` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::OpenCollectionListings` (r:0 w:1)
	/// Proof: `Marketplace::OpenCollectionListings` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Nft::TokenLocks` (r:0 w:1)
	/// Proof: `Nft::TokenLocks` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	fn buy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5052`
		//  Estimated: `23760`
		// Minimum execution time: 161_297_000 picoseconds.
		Weight::from_parts(162_983_000, 0)
			.saturating_add(Weight::from_parts(0, 23760))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `Marketplace::Listings` (r:50 w:50)
	/// Proof: `Marketplace::Listings` (`max_values`: None, `max_size`: Some(20295), added: 22770, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:50 w:0)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:50 w:0)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionInfo` (r:50 w:50)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	/// Storage: `TokenApprovals::ERC721Approvals` (r:0 w:50)
	/// Proof: `TokenApprovals::ERC721Approvals` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::ListingEndSchedule` (r:0 w:50)
	/// Proof: `Marketplace::ListingEndSchedule` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::OpenCollectionListings` (r:0 w:50)
	/// Proof: `Marketplace::OpenCollectionListings` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Nft::TokenLocks` (r:0 w:50)
	/// Proof: `Nft::TokenLocks` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 50]`.
	fn buy_multi(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `583 + p * (4512 ±0)`
		//  Estimated: `990 + p * (22770 ±0)`
		// Minimum execution time: 161_574_000 picoseconds.
		Weight::from_parts(35_941_384, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 83_205
			.saturating_add(Weight::from_parts(117_405_504, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes((6_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 22770).saturating_mul(p.into()))
	}
	/// Storage: `Nft::CollectionInfo` (r:1 w:0)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::FeeTo` (r:1 w:0)
	/// Proof: `Marketplace::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::NextListingId` (r:1 w:1)
	/// Proof: `Marketplace::NextListingId` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Nft::TokenLocks` (r:50 w:50)
	/// Proof: `Nft::TokenLocks` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::Listings` (r:0 w:1)
	/// Proof: `Marketplace::Listings` (`max_values`: None, `max_size`: Some(20295), added: 22770, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::ListingEndSchedule` (r:0 w:1)
	/// Proof: `Marketplace::ListingEndSchedule` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::OpenCollectionListings` (r:0 w:1)
	/// Proof: `Marketplace::OpenCollectionListings` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 50]`.
	fn auction_nft(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4431`
		//  Estimated: `3464 + p * (2508 ±0)`
		// Minimum execution time: 106_009_000 picoseconds.
		Weight::from_parts(95_746_788, 0)
			.saturating_add(Weight::from_parts(0, 3464))
			// Standard Error: 48_958
			.saturating_add(Weight::from_parts(14_286_347, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 2508).saturating_mul(p.into()))
	}
	/// Storage: `Sft::SftCollectionInfo` (r:1 w:0)
	/// Proof: `Sft::SftCollectionInfo` (`max_values`: None, `max_size`: Some(484), added: 2959, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::FeeTo` (r:1 w:0)
	/// Proof: `Marketplace::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::NextListingId` (r:1 w:1)
	/// Proof: `Marketplace::NextListingId` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Sft::TokenInfo` (r:50 w:50)
	/// Proof: `Sft::TokenInfo` (`max_values`: None, `max_size`: Some(52000104), added: 52002579, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::Listings` (r:0 w:1)
	/// Proof: `Marketplace::Listings` (`max_values`: None, `max_size`: Some(20295), added: 22770, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::ListingEndSchedule` (r:0 w:1)
	/// Proof: `Marketplace::ListingEndSchedule` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::OpenCollectionListings` (r:0 w:1)
	/// Proof: `Marketplace::OpenCollectionListings` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 50]`.
	fn auction_sft(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335 + p * (105 ±0)`
		//  Estimated: `3949 + p * (52002579 ±0)`
		// Minimum execution time: 92_686_000 picoseconds.
		Weight::from_parts(87_193_098, 0)
			.saturating_add(Weight::from_parts(0, 3949))
			// Standard Error: 15_450
			.saturating_add(Weight::from_parts(10_352_837, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 52002579).saturating_mul(p.into()))
	}
	/// Storage: `Marketplace::Listings` (r:1 w:1)
	/// Proof: `Marketplace::Listings` (`max_values`: None, `max_size`: Some(20295), added: 22770, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::ListingWinningBid` (r:1 w:1)
	/// Proof: `Marketplace::ListingWinningBid` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `AssetsExt::Holds` (r:1 w:1)
	/// Proof: `AssetsExt::Holds` (`max_values`: None, `max_size`: Some(433), added: 2908, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::ListingEndSchedule` (r:0 w:2)
	/// Proof: `Marketplace::ListingEndSchedule` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	fn bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `830`
		//  Estimated: `23760`
		// Minimum execution time: 205_955_000 picoseconds.
		Weight::from_parts(207_630_000, 0)
			.saturating_add(Weight::from_parts(0, 23760))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: `Marketplace::Listings` (r:1 w:1)
	/// Proof: `Marketplace::Listings` (`max_values`: None, `max_size`: Some(20295), added: 22770, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::ListingEndSchedule` (r:0 w:1)
	/// Proof: `Marketplace::ListingEndSchedule` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::OpenCollectionListings` (r:0 w:1)
	/// Proof: `Marketplace::OpenCollectionListings` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Nft::TokenLocks` (r:0 w:1)
	/// Proof: `Nft::TokenLocks` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	fn cancel_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `249`
		//  Estimated: `23760`
		// Minimum execution time: 64_234_000 picoseconds.
		Weight::from_parts(64_895_000, 0)
			.saturating_add(Weight::from_parts(0, 23760))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Marketplace::Listings` (r:1 w:1)
	/// Proof: `Marketplace::Listings` (`max_values`: None, `max_size`: Some(20295), added: 22770, mode: `MaxEncodedLen`)
	fn update_fixed_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `249`
		//  Estimated: `23760`
		// Minimum execution time: 48_730_000 picoseconds.
		Weight::from_parts(49_703_000, 0)
			.saturating_add(Weight::from_parts(0, 23760))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Nft::CollectionInfo` (r:1 w:0)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::NextOfferId` (r:1 w:1)
	/// Proof: `Marketplace::NextOfferId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Nft::TokenLocks` (r:1 w:0)
	/// Proof: `Nft::TokenLocks` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `AssetsExt::Holds` (r:1 w:1)
	/// Proof: `AssetsExt::Holds` (`max_values`: None, `max_size`: Some(433), added: 2908, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::TokenOffers` (r:1 w:1)
	/// Proof: `Marketplace::TokenOffers` (`max_values`: None, `max_size`: Some(818), added: 3293, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::Offers` (r:0 w:1)
	/// Proof: `Marketplace::Offers` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	fn make_simple_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4984`
		//  Estimated: `6160`
		// Minimum execution time: 220_813_000 picoseconds.
		Weight::from_parts(222_966_000, 0)
			.saturating_add(Weight::from_parts(0, 6160))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: `Marketplace::Offers` (r:1 w:1)
	/// Proof: `Marketplace::Offers` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	/// Storage: `AssetsExt::Holds` (r:1 w:1)
	/// Proof: `AssetsExt::Holds` (`max_values`: None, `max_size`: Some(433), added: 2908, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::TokenOffers` (r:1 w:1)
	/// Proof: `Marketplace::TokenOffers` (`max_values`: None, `max_size`: Some(818), added: 3293, mode: `MaxEncodedLen`)
	fn cancel_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1070`
		//  Estimated: `6160`
		// Minimum execution time: 198_846_000 picoseconds.
		Weight::from_parts(200_371_000, 0)
			.saturating_add(Weight::from_parts(0, 6160))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `Marketplace::Offers` (r:1 w:1)
	/// Proof: `Marketplace::Offers` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	/// Storage: `Nft::CollectionInfo` (r:1 w:1)
	/// Proof: `Nft::CollectionInfo` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	/// Storage: `Nft::TokenLocks` (r:1 w:1)
	/// Proof: `Nft::TokenLocks` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::FeeTo` (r:1 w:0)
	/// Proof: `Marketplace::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	/// Storage: `AssetsExt::Holds` (r:1 w:1)
	/// Proof: `AssetsExt::Holds` (`max_values`: None, `max_size`: Some(433), added: 2908, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::TokenOffers` (r:1 w:1)
	/// Proof: `Marketplace::TokenOffers` (`max_values`: None, `max_size`: Some(818), added: 3293, mode: `MaxEncodedLen`)
	/// Storage: `TokenApprovals::ERC721Approvals` (r:0 w:1)
	/// Proof: `TokenApprovals::ERC721Approvals` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	fn accept_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5366`
		//  Estimated: `6160`
		// Minimum execution time: 322_218_000 picoseconds.
		Weight::from_parts(324_783_000, 0)
			.saturating_add(Weight::from_parts(0, 6160))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	/// Storage: `Marketplace::Offers` (r:1 w:1)
	/// Proof: `Marketplace::Offers` (`max_values`: None, `max_size`: Some(70), added: 2545, mode: `MaxEncodedLen`)
	/// Storage: `Nft::TokenInfo` (r:1 w:0)
	/// Proof: `Nft::TokenInfo` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	/// Storage: `AssetsExt::Holds` (r:1 w:1)
	/// Proof: `AssetsExt::Holds` (`max_values`: None, `max_size`: Some(433), added: 2908, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Marketplace::TokenOffers` (r:1 w:1)
	/// Proof: `Marketplace::TokenOffers` (`max_values`: None, `max_size`: Some(818), added: 3293, mode: `MaxEncodedLen`)
	fn remove_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2512`
		//  Estimated: `6160`
		// Minimum execution time: 94_000_000 picoseconds.
		Weight::from_parts(96_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6160))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `Marketplace::FeeTo` (r:0 w:1)
	/// Proof: `Marketplace::FeeTo` (`max_values`: Some(1), `max_size`: Some(21), added: 516, mode: `MaxEncodedLen`)
	fn set_fee_to() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 24_408_000 picoseconds.
		Weight::from_parts(25_172_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
