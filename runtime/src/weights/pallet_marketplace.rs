//! Autogenerated weights for pallet_marketplace
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-22, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Justins-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../rust_builds/release/seed
// benchmark
// pallet
// --chain
// dev
// --steps
// 50
// --repeat
// 20
// --pallet
// pallet_nft
// --extrinsic=*
// --execution
// wasm
// --wasm-execution
// compiled
// --heap-pages
// 4096
// --output
// ./output
// --template
// ./scripts/pallet_template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_marketplace`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_marketplace::WeightInfo for WeightInfo<T> {
	// Storage: Marketplace NextMarketplaceId (r:1 w:1)
	// Storage: Marketplace RegisteredMarketplaces (r:0 w:1)
	fn register_marketplace() -> Weight {
		(48_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Nft CollectionInfo (r:1 w:0)
	// Storage: Marketplace NextListingId (r:1 w:1)
	// Storage: Nft TokenLocks (r:1 w:1)
	// Storage: Marketplace Listings (r:0 w:1)
	// Storage: Marketplace ListingEndSchedule (r:0 w:1)
	// Storage: Marketplace OpenCollectionListings (r:0 w:1)
	fn sell() -> Weight {
		(85_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Marketplace Listings (r:1 w:1)
	// Storage: Marketplace FeeTo (r:1 w:0)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: Nft CollectionInfo (r:1 w:1)
	// Storage: TokenApprovals ERC721Approvals (r:0 w:1)
	// Storage: Nft TokenLocks (r:0 w:1)
	// Storage: Marketplace ListingEndSchedule (r:0 w:1)
	// Storage: Marketplace OpenCollectionListings (r:0 w:1)
	fn buy() -> Weight {
		(148_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Nft CollectionInfo (r:1 w:0)
	// Storage: Marketplace NextListingId (r:1 w:1)
	// Storage: Nft TokenLocks (r:1 w:1)
	// Storage: Marketplace Listings (r:0 w:1)
	// Storage: Marketplace ListingEndSchedule (r:0 w:1)
	// Storage: Marketplace OpenCollectionListings (r:0 w:1)
	fn auction() -> Weight {
		(93_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Marketplace Listings (r:1 w:1)
	// Storage: Marketplace ListingWinningBid (r:1 w:1)
	// Storage: AssetsExt Holds (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:2 w:2)
	// Storage: Marketplace ListingEndSchedule (r:0 w:2)
	fn bid() -> Weight {
		(183_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	// Storage: Marketplace Listings (r:1 w:1)
	// Storage: Nft TokenLocks (r:0 w:1)
	// Storage: Marketplace ListingEndSchedule (r:0 w:1)
	// Storage: Marketplace OpenCollectionListings (r:0 w:1)
	fn cancel_sale() -> Weight {
		(57_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Marketplace Listings (r:1 w:1)
	fn update_fixed_price() -> Weight {
		(48_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Nft CollectionInfo (r:1 w:0)
	// Storage: Marketplace NextOfferId (r:1 w:1)
	// Storage: Nft TokenLocks (r:1 w:0)
	// Storage: AssetsExt Holds (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: Marketplace TokenOffers (r:1 w:1)
	// Storage: Marketplace Offers (r:0 w:1)
	fn make_simple_offer() -> Weight {
		(172_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: Marketplace Offers (r:1 w:1)
	// Storage: AssetsExt Holds (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: Marketplace TokenOffers (r:1 w:1)
	fn cancel_offer() -> Weight {
		(132_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: Marketplace Offers (r:1 w:1)
	// Storage: Nft TokenLocks (r:1 w:0)
	// Storage: Nft CollectionInfo (r:1 w:1)
	// Storage: AssetsExt Holds (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: Marketplace TokenOffers (r:1 w:1)
	// Storage: TokenApprovals ERC721Approvals (r:0 w:1)
	fn accept_offer() -> Weight {
		(185_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Marketplace FeeTo (r:0 w:1)
	fn set_fee_to() -> Weight {
		(32_000_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}