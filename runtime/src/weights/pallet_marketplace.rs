//! Autogenerated weights for `pallet_marketplace`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-19, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-102-147`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_marketplace
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./runtime/src/weights/pallet_marketplace.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_marketplace`.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_marketplace::WeightInfo for WeightInfo<T> {
    // Storage: Marketplace NextMarketplaceId (r:1 w:1)
    // Storage: Marketplace RegisteredMarketplaces (r:0 w:1)
    fn register_marketplace() -> Weight {
        Weight::from_ref_time(50_784_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
    // Storage: Nft CollectionInfo (r:1 w:0)
    // Storage: Marketplace FeeTo (r:1 w:0)
    // Storage: Marketplace NextListingId (r:1 w:1)
    // Storage: Nft TokenLocks (r:1 w:1)
    // Storage: Marketplace Listings (r:0 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    fn sell_nft() -> Weight {
        Weight::from_ref_time(103_880_000 as u64)
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().writes(5 as u64))
    }
    // Storage: Marketplace Listings (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: Nft CollectionInfo (r:1 w:1)
    // Storage: TokenApprovals ERC721Approvals (r:0 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    // Storage: Nft TokenLocks (r:0 w:1)
    fn buy() -> Weight {
        Weight::from_ref_time(199_407_000 as u64)
            .saturating_add(T::DbWeight::get().reads(5 as u64))
            .saturating_add(T::DbWeight::get().writes(9 as u64))
    }
    // Storage: Nft CollectionInfo (r:1 w:0)
    // Storage: Marketplace FeeTo (r:1 w:0)
    // Storage: Marketplace NextListingId (r:1 w:1)
    // Storage: Nft TokenLocks (r:1 w:1)
    // Storage: Marketplace Listings (r:0 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    fn auction_nft() -> Weight {
        Weight::from_ref_time(103_451_000 as u64)
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().writes(5 as u64))
    }
    // Storage: Marketplace Listings (r:1 w:1)
    // Storage: Marketplace ListingWinningBid (r:1 w:1)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:2 w:2)
    // Storage: Marketplace ListingEndSchedule (r:0 w:2)
    fn bid() -> Weight {
        Weight::from_ref_time(197_394_000 as u64)
            .saturating_add(T::DbWeight::get().reads(8 as u64))
            .saturating_add(T::DbWeight::get().writes(10 as u64))
    }
    // Storage: Marketplace Listings (r:1 w:1)
    // Storage: Marketplace ListingEndSchedule (r:0 w:1)
    // Storage: Marketplace OpenCollectionListings (r:0 w:1)
    // Storage: Nft TokenLocks (r:0 w:1)
    fn cancel_sale() -> Weight {
        Weight::from_ref_time(74_571_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(4 as u64))
    }
    // Storage: Marketplace Listings (r:1 w:1)
    fn update_fixed_price() -> Weight {
        Weight::from_ref_time(62_047_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: Nft CollectionInfo (r:1 w:0)
    // Storage: Marketplace NextOfferId (r:1 w:1)
    // Storage: Nft TokenLocks (r:1 w:0)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    // Storage: Marketplace TokenOffers (r:1 w:1)
    // Storage: Marketplace Offers (r:0 w:1)
    fn make_simple_offer() -> Weight {
        Weight::from_ref_time(189_342_000 as u64)
            .saturating_add(T::DbWeight::get().reads(9 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    // Storage: Marketplace Offers (r:1 w:1)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    // Storage: Marketplace TokenOffers (r:1 w:1)
    fn cancel_offer() -> Weight {
        Weight::from_ref_time(175_782_000 as u64)
            .saturating_add(T::DbWeight::get().reads(7 as u64))
            .saturating_add(T::DbWeight::get().writes(7 as u64))
    }
    // Storage: Marketplace Offers (r:1 w:1)
    // Storage: Nft CollectionInfo (r:1 w:1)
    // Storage: Nft TokenLocks (r:1 w:0)
    // Storage: Marketplace FeeTo (r:1 w:0)
    // Storage: AssetsExt Holds (r:1 w:1)
    // Storage: Assets Asset (r:1 w:1)
    // Storage: Assets Account (r:2 w:2)
    // Storage: System Account (r:1 w:1)
    // Storage: Marketplace TokenOffers (r:1 w:1)
    // Storage: TokenApprovals ERC721Approvals (r:0 w:1)
    fn accept_offer() -> Weight {
        Weight::from_ref_time(265_113_000 as u64)
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(9 as u64))
    }
    // Storage: Marketplace FeeTo (r:0 w:1)
    fn set_fee_to() -> Weight {
        Weight::from_ref_time(32_000_000 as u64)
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
}
