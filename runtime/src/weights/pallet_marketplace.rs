
//! Autogenerated weights for `pallet_marketplace`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-102-147`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-marketplace
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./runtime/src/weights/pallet_marketplace.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_marketplace`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_marketplace::WeightInfo for WeightInfo<T> {
	// Storage: Marketplace NextMarketplaceId (r:1 w:1)
	// Storage: Marketplace RegisteredMarketplaces (r:0 w:1)
	fn register_marketplace() -> Weight {
		Weight::from_all(54_893_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Nft CollectionInfo (r:1 w:0)
	// Storage: Marketplace FeeTo (r:1 w:0)
	// Storage: Marketplace NextListingId (r:1 w:1)
	// Storage: Nft TokenLocks (r:1 w:1)
	// Storage: Marketplace Listings (r:0 w:1)
	// Storage: Marketplace ListingEndSchedule (r:0 w:1)
	// Storage: Marketplace OpenCollectionListings (r:0 w:1)
	/// The range of component `p` is `[1, 50]`.
	fn sell_nft(p: u32, ) -> Weight {
		Weight::from_all(114_457_000 as u64)
			// Standard Error: 8_169
			.saturating_add(Weight::from_all(11_313_760 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: Sft SftCollectionInfo (r:1 w:0)
	// Storage: Marketplace FeeTo (r:1 w:0)
	// Storage: Marketplace NextListingId (r:1 w:1)
	// Storage: Sft TokenInfo (r:1 w:1)
	// Storage: Marketplace Listings (r:0 w:1)
	// Storage: Marketplace ListingEndSchedule (r:0 w:1)
	// Storage: Marketplace OpenCollectionListings (r:0 w:1)
	/// The range of component `p` is `[1, 50]`.
	fn sell_sft(p: u32, ) -> Weight {
		Weight::from_all(103_871_000 as u64)
			// Standard Error: 6_979
			.saturating_add(Weight::from_all(8_215_707 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: Marketplace Listings (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: Nft CollectionInfo (r:1 w:1)
	// Storage: TokenApprovals ERC721Approvals (r:0 w:1)
	// Storage: Marketplace ListingEndSchedule (r:0 w:1)
	// Storage: Marketplace OpenCollectionListings (r:0 w:1)
	// Storage: Nft TokenLocks (r:0 w:1)
	fn buy() -> Weight {
		Weight::from_all(214_610_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: Marketplace Listings (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: Nft CollectionInfo (r:1 w:1)
	// Storage: TokenApprovals ERC721Approvals (r:0 w:1)
	// Storage: Marketplace ListingEndSchedule (r:0 w:1)
	// Storage: Marketplace OpenCollectionListings (r:0 w:1)
	// Storage: Nft TokenLocks (r:0 w:1)
	/// The range of component `p` is `[1, 50]`.
	fn buy_multi(p: u32, ) -> Weight {
		Weight::from_all(214_929_000 as u64)
			// Standard Error: 149_332
			.saturating_add(Weight::from_all(143_823_942 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((5 as u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
			.saturating_add(T::DbWeight::get().writes((9 as u64).saturating_mul(p as u64)))
	}
	// Storage: Nft CollectionInfo (r:1 w:0)
	// Storage: Marketplace FeeTo (r:1 w:0)
	// Storage: Marketplace NextListingId (r:1 w:1)
	// Storage: Nft TokenLocks (r:1 w:1)
	// Storage: Marketplace Listings (r:0 w:1)
	// Storage: Marketplace ListingEndSchedule (r:0 w:1)
	// Storage: Marketplace OpenCollectionListings (r:0 w:1)
	/// The range of component `p` is `[1, 50]`.
	fn auction_nft(p: u32, ) -> Weight {
		Weight::from_all(114_630_000 as u64)
			// Standard Error: 7_983
			.saturating_add(Weight::from_all(11_305_102 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: Sft SftCollectionInfo (r:1 w:0)
	// Storage: Marketplace FeeTo (r:1 w:0)
	// Storage: Marketplace NextListingId (r:1 w:1)
	// Storage: Sft TokenInfo (r:1 w:1)
	// Storage: Marketplace Listings (r:0 w:1)
	// Storage: Marketplace ListingEndSchedule (r:0 w:1)
	// Storage: Marketplace OpenCollectionListings (r:0 w:1)
	/// The range of component `p` is `[1, 50]`.
	fn auction_sft(p: u32, ) -> Weight {
		Weight::from_all(102_552_000 as u64)
			// Standard Error: 7_049
			.saturating_add(Weight::from_all(8_159_046 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: Marketplace Listings (r:1 w:1)
	// Storage: Marketplace ListingWinningBid (r:1 w:1)
	// Storage: AssetsExt Holds (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:2 w:2)
	// Storage: Marketplace ListingEndSchedule (r:0 w:2)
	fn bid() -> Weight {
		Weight::from_all(198_371_000 as u64)
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
	}
	// Storage: Marketplace Listings (r:1 w:1)
	// Storage: Marketplace ListingEndSchedule (r:0 w:1)
	// Storage: Marketplace OpenCollectionListings (r:0 w:1)
	// Storage: Nft TokenLocks (r:0 w:1)
	fn cancel_sale() -> Weight {
		Weight::from_all(77_516_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Marketplace Listings (r:1 w:1)
	fn update_fixed_price() -> Weight {
		Weight::from_all(63_733_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Nft CollectionInfo (r:1 w:0)
	// Storage: Marketplace NextOfferId (r:1 w:1)
	// Storage: Nft TokenLocks (r:1 w:0)
	// Storage: AssetsExt Holds (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: Marketplace TokenOffers (r:1 w:1)
	// Storage: Marketplace Offers (r:0 w:1)
	fn make_simple_offer() -> Weight {
		Weight::from_all(193_035_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: Marketplace Offers (r:1 w:1)
	// Storage: AssetsExt Holds (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: Marketplace TokenOffers (r:1 w:1)
	fn cancel_offer() -> Weight {
		Weight::from_all(176_013_000 as u64)
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: Marketplace Offers (r:1 w:1)
	// Storage: Nft CollectionInfo (r:1 w:1)
	// Storage: Nft TokenLocks (r:1 w:1)
	// Storage: Marketplace FeeTo (r:1 w:0)
	// Storage: AssetsExt Holds (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: Marketplace TokenOffers (r:1 w:1)
	// Storage: TokenApprovals ERC721Approvals (r:0 w:1)
	fn accept_offer() -> Weight {
		Weight::from_all(288_646_000 as u64)
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
	}
	// Storage: Marketplace FeeTo (r:0 w:1)
	fn set_fee_to() -> Weight {
		Weight::from_all(37_843_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}
