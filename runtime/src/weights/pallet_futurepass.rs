
//! Autogenerated weights for `pallet_futurepass`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-05-23, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-102-147`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-futurepass
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./runtime/src/weights/pallet_futurepass.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_futurepass`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_futurepass::WeightInfo for WeightInfo<T> {
	/// Storage: `Futurepass::Holders` (r:1 w:1)
	/// Proof: `Futurepass::Holders` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Futurepass::NextFuturepassId` (r:1 w:1)
	/// Proof: `Futurepass::NextFuturepassId` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Proxy::Proxies` (r:1 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(845), added: 3320, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `218`
		//  Estimated: `4310`
		// Minimum execution time: 197_619_000 picoseconds.
		Weight::from_parts(199_889_000, 0)
			.saturating_add(Weight::from_parts(0, 4310))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Futurepass::Holders` (r:1 w:0)
	/// Proof: `Futurepass::Holders` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Proxy::Proxies` (r:1 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(845), added: 3320, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 31]`.
	fn register_delegate_with_signature(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `654 + p * (25 ±0)`
		//  Estimated: `6172`
		// Minimum execution time: 271_992_000 picoseconds.
		Weight::from_parts(275_879_338, 0)
			.saturating_add(Weight::from_parts(0, 6172))
			// Standard Error: 13_070
			.saturating_add(Weight::from_parts(204_040, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Futurepass::Holders` (r:2 w:0)
	/// Proof: `Futurepass::Holders` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Proxy::Proxies` (r:1 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(845), added: 3320, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 31]`.
	fn unregister_delegate(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `679 + p * (25 ±0)`
		//  Estimated: `6172`
		// Minimum execution time: 194_198_000 picoseconds.
		Weight::from_parts(196_498_171, 0)
			.saturating_add(Weight::from_parts(0, 6172))
			// Standard Error: 4_891
			.saturating_add(Weight::from_parts(246_407, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Futurepass::Holders` (r:2 w:2)
	/// Proof: `Futurepass::Holders` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Proxy::Proxies` (r:1 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(845), added: 3320, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 31]`.
	fn transfer_futurepass(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `654 + p * (25 ±0)`
		//  Estimated: `6172`
		// Minimum execution time: 310_618_000 picoseconds.
		Weight::from_parts(198_696_974, 0)
			.saturating_add(Weight::from_parts(0, 6172))
			// Standard Error: 49_483
			.saturating_add(Weight::from_parts(110_453_968, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `MaintenanceMode::BlockedCalls` (r:2 w:0)
	/// Proof: `MaintenanceMode::BlockedCalls` (`max_values`: None, `max_size`: Some(111), added: 2586, mode: `MaxEncodedLen`)
	/// Storage: `MaintenanceMode::BlockedPallets` (r:2 w:0)
	/// Proof: `MaintenanceMode::BlockedPallets` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `Proxy::Proxies` (r:1 w:0)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(845), added: 3320, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 31]`.
	fn proxy_extrinsic(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `225 + p * (25 ±0)`
		//  Estimated: `6162`
		// Minimum execution time: 86_883_000 picoseconds.
		Weight::from_parts(89_745_082, 0)
			.saturating_add(Weight::from_parts(0, 6162))
			// Standard Error: 3_871
			.saturating_add(Weight::from_parts(88_952, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5))
	}
}
