
//! Autogenerated weights for `pallet_futurepass`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Xiankuns-MBP-2`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_futurepass
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output/pallet_futurepass.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_futurepass`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_futurepass::WeightInfo for WeightInfo<T> {
	/// Storage: Futurepass Holders (r:1 w:1)
	/// Proof: Futurepass Holders (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Futurepass NextFuturepassId (r:1 w:1)
	/// Proof: Futurepass NextFuturepassId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Proxy Proxies (r:1 w:1)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(845), added: 3320, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `218`
		//  Estimated: `12905`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(57_000_000, 0)
			.saturating_add(Weight::from_parts(0, 12905))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Futurepass Holders (r:1 w:0)
	/// Proof: Futurepass Holders (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Proxy Proxies (r:1 w:1)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(845), added: 3320, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	fn register_delegate(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `607`
		//  Estimated: `13995`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(53_000_000, 0)
			.saturating_add(Weight::from_parts(76_000, 0).saturating_mul(p.into()))
			.saturating_add(Weight::from_parts(0, 13995))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Futurepass Holders (r:2 w:0)
	/// Proof: Futurepass Holders (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Proxy Proxies (r:1 w:1)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(845), added: 3320, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	fn unregister_delegate(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `670`
		//  Estimated: `16518`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(57_000_000, 0)
			.saturating_add(Weight::from_parts(76_000, 0).saturating_mul(p.into()))
			.saturating_add(Weight::from_parts(0, 16518))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Futurepass Holders (r:2 w:2)
	/// Proof: Futurepass Holders (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Proxy Proxies (r:1 w:1)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(845), added: 3320, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	fn transfer_futurepass() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `644`
		//  Estimated: `16518`
		// Minimum execution time: 86_000_000 picoseconds.
		Weight::from_parts(88_000_000, 0)
			.saturating_add(Weight::from_parts(0, 16518))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: Proxy Proxies (r:1 w:0)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(845), added: 3320, mode: MaxEncodedLen)
	fn proxy_extrinsic(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `173`
		//  Estimated: `4310`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_000_000, 0)
			.saturating_add(Weight::from_parts(76_000, 0).saturating_mul(p.into()))
			.saturating_add(Weight::from_parts(0, 4310))
			.saturating_add(T::DbWeight::get().reads(1))
	}
}
