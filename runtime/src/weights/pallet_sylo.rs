
//! Autogenerated weights for `pallet_sylo`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-01-13, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-102-147`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/seed
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-sylo
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./runtime/src/weights/pallet_sylo.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_sylo`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_sylo::WeightInfo for WeightInfo<T> {
	/// Storage: `Sylo::SyloAssetId` (r:0 w:1)
	/// Proof: `Sylo::SyloAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_payment_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 21_902_000 picoseconds.
		Weight::from_parts(23_486_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Sylo::SyloResolverMethod` (r:0 w:1)
	/// Proof: `Sylo::SyloResolverMethod` (`max_values`: Some(1), `max_size`: Some(502), added: 997, mode: `MaxEncodedLen`)
	fn set_sylo_resolver_method() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 23_408_000 picoseconds.
		Weight::from_parts(24_229_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Sylo::Resolvers` (r:1 w:1)
	/// Proof: `Sylo::Resolvers` (`max_values`: None, `max_size`: Some(5551), added: 8026, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 250]`.
	/// The range of component `q` is `[1, 10]`.
	fn register_resolver(p: u32, q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `175`
		//  Estimated: `9016`
		// Minimum execution time: 36_662_000 picoseconds.
		Weight::from_parts(25_150_265, 0)
			.saturating_add(Weight::from_parts(0, 9016))
			// Standard Error: 506
			.saturating_add(Weight::from_parts(50_172, 0).saturating_mul(p.into()))
			// Standard Error: 13_215
			.saturating_add(Weight::from_parts(1_832_112, 0).saturating_mul(q.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Sylo::Resolvers` (r:1 w:1)
	/// Proof: `Sylo::Resolvers` (`max_values`: None, `max_size`: Some(5551), added: 8026, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 250]`.
	/// The range of component `q` is `[1, 10]`.
	fn update_resolver(p: u32, q: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `289`
		//  Estimated: `9016`
		// Minimum execution time: 39_574_000 picoseconds.
		Weight::from_parts(30_222_407, 0)
			.saturating_add(Weight::from_parts(0, 9016))
			// Standard Error: 452
			.saturating_add(Weight::from_parts(41_431, 0).saturating_mul(p.into()))
			// Standard Error: 11_806
			.saturating_add(Weight::from_parts(1_830_852, 0).saturating_mul(q.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Sylo::Resolvers` (r:1 w:1)
	/// Proof: `Sylo::Resolvers` (`max_values`: None, `max_size`: Some(5551), added: 8026, mode: `MaxEncodedLen`)
	fn unregister_resolver() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `289`
		//  Estimated: `9016`
		// Minimum execution time: 40_473_000 picoseconds.
		Weight::from_parts(41_199_000, 0)
			.saturating_add(Weight::from_parts(0, 9016))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Sylo::ValidationRecords` (r:1 w:1)
	/// Proof: `Sylo::ValidationRecords` (`max_values`: None, `max_size`: Some(19724), added: 22199, mode: `MaxEncodedLen`)
	/// Storage: `Sylo::SyloResolverMethod` (r:1 w:0)
	/// Proof: `Sylo::SyloResolverMethod` (`max_values`: Some(1), `max_size`: Some(502), added: 997, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 250]`.
	/// The range of component `q` is `[1, 10]`.
	/// The range of component `r` is `[1, 10]`.
	fn create_validation_record(p: u32, q: u32, r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212 + q * (22 ±0)`
		//  Estimated: `23189`
		// Minimum execution time: 52_530_000 picoseconds.
		Weight::from_parts(33_608_702, 0)
			.saturating_add(Weight::from_parts(0, 23189))
			// Standard Error: 694
			.saturating_add(Weight::from_parts(53_732, 0).saturating_mul(p.into()))
			// Standard Error: 18_066
			.saturating_add(Weight::from_parts(2_046_152, 0).saturating_mul(q.into()))
			// Standard Error: 18_066
			.saturating_add(Weight::from_parts(940_420, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Sylo::ValidationRecords` (r:1 w:1)
	/// Proof: `Sylo::ValidationRecords` (`max_values`: None, `max_size`: Some(19724), added: 22199, mode: `MaxEncodedLen`)
	fn add_validation_record_entry() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `317`
		//  Estimated: `23189`
		// Minimum execution time: 45_663_000 picoseconds.
		Weight::from_parts(46_557_000, 0)
			.saturating_add(Weight::from_parts(0, 23189))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Sylo::ValidationRecords` (r:1 w:1)
	/// Proof: `Sylo::ValidationRecords` (`max_values`: None, `max_size`: Some(19724), added: 22199, mode: `MaxEncodedLen`)
	/// Storage: `Sylo::SyloResolverMethod` (r:1 w:0)
	/// Proof: `Sylo::SyloResolverMethod` (`max_values`: Some(1), `max_size`: Some(502), added: 997, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 250]`.
	/// The range of component `q` is `[1, 10]`.
	/// The range of component `r` is `[1, 10]`.
	fn update_validation_record(p: u32, q: u32, r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `350 + q * (22 ±0)`
		//  Estimated: `23189`
		// Minimum execution time: 66_160_000 picoseconds.
		Weight::from_parts(15_675_696, 0)
			.saturating_add(Weight::from_parts(0, 23189))
			// Standard Error: 1_045
			.saturating_add(Weight::from_parts(129_503, 0).saturating_mul(p.into()))
			// Standard Error: 27_205
			.saturating_add(Weight::from_parts(6_070_714, 0).saturating_mul(q.into()))
			// Standard Error: 27_205
			.saturating_add(Weight::from_parts(1_796_856, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Sylo::ValidationRecords` (r:1 w:1)
	/// Proof: `Sylo::ValidationRecords` (`max_values`: None, `max_size`: Some(19724), added: 22199, mode: `MaxEncodedLen`)
	fn delete_validation_record() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `276`
		//  Estimated: `23189`
		// Minimum execution time: 41_086_000 picoseconds.
		Weight::from_parts(42_277_000, 0)
			.saturating_add(Weight::from_parts(0, 23189))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
